# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cardpay.api_client import ApiClient


class InvoiceRestControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_invoice_using_post(self, invoice_request, **kwargs):  # noqa: E501
        """createInvoice  # noqa: E501

        :param InvoiceRequest invoice_request: invoiceRequest (required)
        :return: InvoiceCreationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True

        (data) = self.create_invoice_using_post_with_http_info(
            invoice_request, **kwargs
        )  # noqa: E501
        return data

    def create_invoice_using_post_with_http_info(
        self, invoice_request, **kwargs
    ):  # noqa: E501
        """createInvoice  # noqa: E501

        :param InvoiceRequest invoice_request: invoiceRequest (required)
        :return: InvoiceCreationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["invoice_request"]  # noqa: E501
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_invoice_using_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'invoice_request' is set
        if "invoice_request" not in params or params["invoice_request"] is None:
            raise ValueError(
                "Missing the required parameter `invoice_request` when calling `create_invoice_using_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "invoice_request" in params:
            body_params = params["invoice_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        return self.api_client.call_api(
            "/api/invoices",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InvoiceCreationResponse",  # noqa: E501
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_invoice_info_using_get(self, invoice_id, **kwargs):  # noqa: E501
        """getInvoiceInfo  # noqa: E501

        :param str invoice_id: invoiceId (required)
        :return: InvoiceGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True

        (data) = self.get_invoice_info_using_get_with_http_info(
            invoice_id, **kwargs
        )  # noqa: E501
        return data

    def get_invoice_info_using_get_with_http_info(
        self, invoice_id, **kwargs
    ):  # noqa: E501
        """getInvoiceInfo  # noqa: E501

        :param str invoice_id: invoiceId (required)
        :return: InvoiceGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["invoice_id"]  # noqa: E501
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_info_using_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'invoice_id' is set
        if "invoice_id" not in params or params["invoice_id"] is None:
            raise ValueError(
                "Missing the required parameter `invoice_id` when calling `get_invoice_info_using_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "invoice_id" in params:
            path_params["invoiceId"] = params["invoice_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        return self.api_client.call_api(
            "/api/invoices/{invoiceId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InvoiceGetResponse",  # noqa: E501
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
