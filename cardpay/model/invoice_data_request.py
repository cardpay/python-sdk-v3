# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InvoiceDataRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "amount": "float",
        "currency": "str",
        "expire_at": "datetime",
        "installment_amount": "float",
        "installment_type": "str",
        "installments": "list[int]",
    }

    attribute_map = {
        "amount": "amount",
        "currency": "currency",
        "expire_at": "expire_at",
        "installment_amount": "installment_amount",
        "installment_type": "installment_type",
        "installments": "installments",
    }

    def __init__(
        self,
        amount=None,
        currency=None,
        expire_at=None,
        installment_amount=None,
        installment_type=None,
        installments=None,
    ):  # noqa: E501
        """InvoiceDataRequest - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._currency = None
        self._expire_at = None
        self._installment_amount = None
        self._installment_type = None
        self._installments = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        self.currency = currency
        self.expire_at = expire_at
        if installment_amount is not None:
            self.installment_amount = installment_amount
        if installment_type is not None:
            self.installment_type = installment_type
        if installments is not None:
            self.installments = installments

    @property
    def amount(self):
        """Gets the amount of this InvoiceDataRequest.  # noqa: E501


        :return: The amount of this InvoiceDataRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceDataRequest.


        :param amount: The amount of this InvoiceDataRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this InvoiceDataRequest.  # noqa: E501


        :return: The currency of this InvoiceDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InvoiceDataRequest.


        :param currency: The currency of this InvoiceDataRequest.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError(
                "Invalid value for `currency`, must not be `None`"
            )  # noqa: E501

        self._currency = currency

    @property
    def expire_at(self):
        """Gets the expire_at of this InvoiceDataRequest.  # noqa: E501


        :return: The expire_at of this InvoiceDataRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this InvoiceDataRequest.


        :param expire_at: The expire_at of this InvoiceDataRequest.  # noqa: E501
        :type: datetime
        """
        if expire_at is None:
            raise ValueError(
                "Invalid value for `expire_at`, must not be `None`"
            )  # noqa: E501

        self._expire_at = expire_at

    @property
    def installment_amount(self):
        """Gets the installment_amount of this InvoiceDataRequest.  # noqa: E501


        :return: The installment_amount of this InvoiceDataRequest.  # noqa: E501
        :rtype: float
        """
        return self._installment_amount

    @installment_amount.setter
    def installment_amount(self, installment_amount):
        """Sets the installment_amount of this InvoiceDataRequest.


        :param installment_amount: The installment_amount of this InvoiceDataRequest.  # noqa: E501
        :type: float
        """

        self._installment_amount = installment_amount

    @property
    def installment_type(self):
        """Gets the installment_type of this InvoiceDataRequest.  # noqa: E501


        :return: The installment_type of this InvoiceDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._installment_type

    @installment_type.setter
    def installment_type(self, installment_type):
        """Sets the installment_type of this InvoiceDataRequest.


        :param installment_type: The installment_type of this InvoiceDataRequest.  # noqa: E501
        :type: str
        """

        self._installment_type = installment_type

    @property
    def installments(self):
        """Gets the installments of this InvoiceDataRequest.  # noqa: E501


        :return: The installments of this InvoiceDataRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this InvoiceDataRequest.


        :param installments: The installments of this InvoiceDataRequest.  # noqa: E501
        :type: list[int]
        """

        self._installments = installments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(InvoiceDataRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceDataRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
