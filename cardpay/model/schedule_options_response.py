# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cardpay.model.schedule_option import ScheduleOption  # noqa: F401,E501


class ScheduleOptionsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "currency": "str",
        "options": "list[ScheduleOption]",
        "total_amount": "float",
    }

    attribute_map = {
        "currency": "currency",
        "options": "options",
        "total_amount": "total_amount",
    }

    def __init__(self, currency=None, options=None, total_amount=None):  # noqa: E501
        """ScheduleOptionsResponse - a model defined in Swagger"""  # noqa: E501

        self._currency = None
        self._options = None
        self._total_amount = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if options is not None:
            self.options = options
        if total_amount is not None:
            self.total_amount = total_amount

    @property
    def currency(self):
        """Gets the currency of this ScheduleOptionsResponse.  # noqa: E501

        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501

        :return: The currency of this ScheduleOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ScheduleOptionsResponse.

        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501

        :param currency: The currency of this ScheduleOptionsResponse.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def options(self):
        """Gets the options of this ScheduleOptionsResponse.  # noqa: E501

        Array of the calculated options data.  # noqa: E501

        :return: The options of this ScheduleOptionsResponse.  # noqa: E501
        :rtype: list[ScheduleOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ScheduleOptionsResponse.

        Array of the calculated options data.  # noqa: E501

        :param options: The options of this ScheduleOptionsResponse.  # noqa: E501
        :type: list[ScheduleOption]
        """

        self._options = options

    @property
    def total_amount(self):
        """Gets the total_amount of this ScheduleOptionsResponse.  # noqa: E501

        Total amount of subscription to be calculated to options; can have dot as a decimal separator.  # noqa: E501

        :return: The total_amount of this ScheduleOptionsResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this ScheduleOptionsResponse.

        Total amount of subscription to be calculated to options; can have dot as a decimal separator.  # noqa: E501

        :param total_amount: The total_amount of this ScheduleOptionsResponse.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(ScheduleOptionsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleOptionsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
