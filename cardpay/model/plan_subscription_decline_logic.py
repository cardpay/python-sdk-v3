# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PlanSubscriptionDeclineLogic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"continue_retries": "bool", "duration": "int", "status_to": "str"}

    attribute_map = {
        "continue_retries": "continue_retries",
        "duration": "duration",
        "status_to": "status_to",
    }

    def __init__(
        self, continue_retries=None, duration=None, status_to=None
    ):  # noqa: E501
        """PlanSubscriptionDeclineLogic - a model defined in Swagger"""  # noqa: E501

        self._continue_retries = None
        self._duration = None
        self._status_to = None
        self.discriminator = None

        if continue_retries is not None:
            self.continue_retries = continue_retries
        if duration is not None:
            self.duration = duration
        if status_to is not None:
            self.status_to = status_to

    @property
    def continue_retries(self):
        """Gets the continue_retries of this PlanSubscriptionDeclineLogic.  # noqa: E501

        Continue retries  # noqa: E501

        :return: The continue_retries of this PlanSubscriptionDeclineLogic.  # noqa: E501
        :rtype: bool
        """
        return self._continue_retries

    @continue_retries.setter
    def continue_retries(self, continue_retries):
        """Sets the continue_retries of this PlanSubscriptionDeclineLogic.

        Continue retries  # noqa: E501

        :param continue_retries: The continue_retries of this PlanSubscriptionDeclineLogic.  # noqa: E501
        :type: bool
        """

        self._continue_retries = continue_retries

    @property
    def duration(self):
        """Gets the duration of this PlanSubscriptionDeclineLogic.  # noqa: E501

        Duration in calendar months  # noqa: E501

        :return: The duration of this PlanSubscriptionDeclineLogic.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PlanSubscriptionDeclineLogic.

        Duration in calendar months  # noqa: E501

        :param duration: The duration of this PlanSubscriptionDeclineLogic.  # noqa: E501
        :type: int
        """
        if duration is not None and duration > 6:  # noqa: E501
            raise ValueError(
                "Invalid value for `duration`, must be a value less than or equal to `6`"
            )  # noqa: E501
        if duration is not None and duration < 1:  # noqa: E501
            raise ValueError(
                "Invalid value for `duration`, must be a value greater than or equal to `1`"
            )  # noqa: E501

        self._duration = duration

    @property
    def status_to(self):
        """Gets the status_to of this PlanSubscriptionDeclineLogic.  # noqa: E501

        The status that will be set for the subscription after exhausted all payment retry attempts  # noqa: E501

        :return: The status_to of this PlanSubscriptionDeclineLogic.  # noqa: E501
        :rtype: str
        """
        return self._status_to

    @status_to.setter
    def status_to(self, status_to):
        """Sets the status_to of this PlanSubscriptionDeclineLogic.

        The status that will be set for the subscription after exhausted all payment retry attempts  # noqa: E501

        :param status_to: The status_to of this PlanSubscriptionDeclineLogic.  # noqa: E501
        :type: str
        """
        if status_to is not None and not re.search(r"WAITING", status_to):  # noqa: E501
            raise ValueError(
                r"Invalid value for `status_to`, must be a follow pattern or equal to `/WAITING/`"
            )  # noqa: E501

        self._status_to = status_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(PlanSubscriptionDeclineLogic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanSubscriptionDeclineLogic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
