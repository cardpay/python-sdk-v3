# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cardpay.model.report import Report  # noqa: F401,E501


class ReportsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "download_url": "str",
        "hash_sum": "str",
        "reports": "list[Report]",
        "sample_id": "str",
        "size": "int",
    }

    attribute_map = {
        "download_url": "downloadUrl",
        "hash_sum": "hashSum",
        "reports": "reports",
        "sample_id": "sampleId",
        "size": "size",
    }

    def __init__(
        self, download_url=None, hash_sum=None, reports=None, sample_id=None, size=None
    ):  # noqa: E501
        """ReportsResponse - a model defined in Swagger"""  # noqa: E501

        self._download_url = None
        self._hash_sum = None
        self._reports = None
        self._sample_id = None
        self._size = None
        self.discriminator = None

        if download_url is not None:
            self.download_url = download_url
        if hash_sum is not None:
            self.hash_sum = hash_sum
        if reports is not None:
            self.reports = reports
        if sample_id is not None:
            self.sample_id = sample_id
        if size is not None:
            self.size = size

    @property
    def download_url(self):
        """Gets the download_url of this ReportsResponse.  # noqa: E501


        :return: The download_url of this ReportsResponse.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this ReportsResponse.


        :param download_url: The download_url of this ReportsResponse.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def hash_sum(self):
        """Gets the hash_sum of this ReportsResponse.  # noqa: E501


        :return: The hash_sum of this ReportsResponse.  # noqa: E501
        :rtype: str
        """
        return self._hash_sum

    @hash_sum.setter
    def hash_sum(self, hash_sum):
        """Sets the hash_sum of this ReportsResponse.


        :param hash_sum: The hash_sum of this ReportsResponse.  # noqa: E501
        :type: str
        """

        self._hash_sum = hash_sum

    @property
    def reports(self):
        """Gets the reports of this ReportsResponse.  # noqa: E501


        :return: The reports of this ReportsResponse.  # noqa: E501
        :rtype: list[Report]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this ReportsResponse.


        :param reports: The reports of this ReportsResponse.  # noqa: E501
        :type: list[Report]
        """

        self._reports = reports

    @property
    def sample_id(self):
        """Gets the sample_id of this ReportsResponse.  # noqa: E501


        :return: The sample_id of this ReportsResponse.  # noqa: E501
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this ReportsResponse.


        :param sample_id: The sample_id of this ReportsResponse.  # noqa: E501
        :type: str
        """

        self._sample_id = sample_id

    @property
    def size(self):
        """Gets the size of this ReportsResponse.  # noqa: E501


        :return: The size of this ReportsResponse.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ReportsResponse.


        :param size: The size of this ReportsResponse.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(ReportsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
