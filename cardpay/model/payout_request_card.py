# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PayoutRequestCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "expiration": "str",
        "network_token": "bool",
        "pan": "str",
        "token_cryptogram": "str",
        "token_type": "str",
    }

    attribute_map = {
        "expiration": "expiration",
        "network_token": "network_token",
        "pan": "pan",
        "token_cryptogram": "token_cryptogram",
        "token_type": "token_type",
    }

    def __init__(
        self,
        expiration=None,
        network_token=None,
        pan=None,
        token_cryptogram=None,
        token_type=None,
    ):  # noqa: E501
        """PayoutRequestCard - a model defined in Swagger"""  # noqa: E501

        self._expiration = None
        self._network_token = None
        self._pan = None
        self._token_cryptogram = None
        self._token_type = None
        self.discriminator = None

        if expiration is not None:
            self.expiration = expiration
        if network_token is not None:
            self.network_token = network_token
        self.pan = pan
        if token_cryptogram is not None:
            self.token_cryptogram = token_cryptogram
        if token_type is not None:
            self.token_type = token_type

    @property
    def expiration(self):
        """Gets the expiration of this PayoutRequestCard.  # noqa: E501

        Customer's card expiration date. Format: `mm/yyyy`  # noqa: E501

        :return: The expiration of this PayoutRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this PayoutRequestCard.

        Customer's card expiration date. Format: `mm/yyyy`  # noqa: E501

        :param expiration: The expiration of this PayoutRequestCard.  # noqa: E501
        :type: str
        """
        if expiration is not None and not re.search(
            r"([0-9]{2}\/[0-9]{4})", expiration
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `expiration`, must be a follow pattern or equal to `/([0-9]{2}\/[0-9]{4})/`"
            )  # noqa: E501

        self._expiration = expiration

    @property
    def network_token(self):
        """Gets the network_token of this PayoutRequestCard.  # noqa: E501

        Indicator network token data in payout request instead of card data.  # noqa: E501

        :return: The network_token of this PayoutRequestCard.  # noqa: E501
        :rtype: bool
        """
        return self._network_token

    @network_token.setter
    def network_token(self, network_token):
        """Sets the network_token of this PayoutRequestCard.

        Indicator network token data in payout request instead of card data.  # noqa: E501

        :param network_token: The network_token of this PayoutRequestCard.  # noqa: E501
        :type: bool
        """

        self._network_token = network_token

    @property
    def pan(self):
        """Gets the pan of this PayoutRequestCard.  # noqa: E501

        Customer's card number (PAN). Any valid card number, may contain spaces. Required if `card_account.token` element isn't presented  # noqa: E501

        :return: The pan of this PayoutRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this PayoutRequestCard.

        Customer's card number (PAN). Any valid card number, may contain spaces. Required if `card_account.token` element isn't presented  # noqa: E501

        :param pan: The pan of this PayoutRequestCard.  # noqa: E501
        :type: str
        """
        if pan is None:
            raise ValueError(
                "Invalid value for `pan`, must not be `None`"
            )  # noqa: E501
        if pan is not None and len(pan) > 19:
            raise ValueError(
                "Invalid value for `pan`, length must be less than or equal to `19`"
            )  # noqa: E501
        if pan is not None and len(pan) < 13:
            raise ValueError(
                "Invalid value for `pan`, length must be greater than or equal to `13`"
            )  # noqa: E501

        self._pan = pan

    @property
    def token_cryptogram(self):
        """Gets the token_cryptogram of this PayoutRequestCard.  # noqa: E501

        Field cryptogram corresponding to the payment token  # noqa: E501

        :return: The token_cryptogram of this PayoutRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._token_cryptogram

    @token_cryptogram.setter
    def token_cryptogram(self, token_cryptogram):
        """Sets the token_cryptogram of this PayoutRequestCard.

        Field cryptogram corresponding to the payment token  # noqa: E501

        :param token_cryptogram: The token_cryptogram of this PayoutRequestCard.  # noqa: E501
        :type: str
        """
        if token_cryptogram is not None and len(token_cryptogram) > 100:
            raise ValueError(
                "Invalid value for `token_cryptogram`, length must be less than or equal to `100`"
            )  # noqa: E501
        if token_cryptogram is not None and len(token_cryptogram) < 1:
            raise ValueError(
                "Invalid value for `token_cryptogram`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._token_cryptogram = token_cryptogram

    @property
    def token_type(self):
        """Gets the token_type of this PayoutRequestCard.  # noqa: E501

        The field specifies the type of token used in a payment request. It indicates the source of the tokenized payment credentials. Possible values: APPLEPAY or NETWORK  # noqa: E501

        :return: The token_type of this PayoutRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this PayoutRequestCard.

        The field specifies the type of token used in a payment request. It indicates the source of the tokenized payment credentials. Possible values: APPLEPAY or NETWORK  # noqa: E501

        :param token_type: The token_type of this PayoutRequestCard.  # noqa: E501
        :type: str
        """
        if token_type is not None and not re.search(
            r"APPLEPAY|NETWORK", token_type
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `token_type`, must be a follow pattern or equal to `/APPLEPAY|NETWORK/`"
            )  # noqa: E501

        self._token_type = token_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(PayoutRequestCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayoutRequestCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
