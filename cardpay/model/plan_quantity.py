# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PlanQuantity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "ending_quantity": "int",
        "price_per_unit": "float",
        "starting_quantity": "int",
    }

    attribute_map = {
        "ending_quantity": "ending_quantity",
        "price_per_unit": "price_per_unit",
        "starting_quantity": "starting_quantity",
    }

    def __init__(
        self, ending_quantity=None, price_per_unit=None, starting_quantity=None
    ):  # noqa: E501
        """PlanQuantity - a model defined in Swagger"""  # noqa: E501

        self._ending_quantity = None
        self._price_per_unit = None
        self._starting_quantity = None
        self.discriminator = None

        if ending_quantity is not None:
            self.ending_quantity = ending_quantity
        if price_per_unit is not None:
            self.price_per_unit = price_per_unit
        if starting_quantity is not None:
            self.starting_quantity = starting_quantity

    @property
    def ending_quantity(self):
        """Gets the ending_quantity of this PlanQuantity.  # noqa: E501

        Ending units quantity of the subscription. Mandatory if `pricing_model` is `TIERED` or `VOLUME`  # noqa: E501

        :return: The ending_quantity of this PlanQuantity.  # noqa: E501
        :rtype: int
        """
        return self._ending_quantity

    @ending_quantity.setter
    def ending_quantity(self, ending_quantity):
        """Sets the ending_quantity of this PlanQuantity.

        Ending units quantity of the subscription. Mandatory if `pricing_model` is `TIERED` or `VOLUME`  # noqa: E501

        :param ending_quantity: The ending_quantity of this PlanQuantity.  # noqa: E501
        :type: int
        """
        if ending_quantity is not None and ending_quantity < 1:  # noqa: E501
            raise ValueError(
                "Invalid value for `ending_quantity`, must be a value greater than or equal to `1`"
            )  # noqa: E501

        self._ending_quantity = ending_quantity

    @property
    def price_per_unit(self):
        """Gets the price_per_unit of this PlanQuantity.  # noqa: E501

        Price depending units quantity. Mandatory if `pricing_model` is `TIERED` or `VOLUME`  # noqa: E501

        :return: The price_per_unit of this PlanQuantity.  # noqa: E501
        :rtype: float
        """
        return self._price_per_unit

    @price_per_unit.setter
    def price_per_unit(self, price_per_unit):
        """Sets the price_per_unit of this PlanQuantity.

        Price depending units quantity. Mandatory if `pricing_model` is `TIERED` or `VOLUME`  # noqa: E501

        :param price_per_unit: The price_per_unit of this PlanQuantity.  # noqa: E501
        :type: float
        """
        if price_per_unit is not None and price_per_unit < 0:  # noqa: E501
            raise ValueError(
                "Invalid value for `price_per_unit`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._price_per_unit = price_per_unit

    @property
    def starting_quantity(self):
        """Gets the starting_quantity of this PlanQuantity.  # noqa: E501

        Starting units quantity of the subscription. Mandatory if `pricing_model` is `TIERED` or `VOLUME`  # noqa: E501

        :return: The starting_quantity of this PlanQuantity.  # noqa: E501
        :rtype: int
        """
        return self._starting_quantity

    @starting_quantity.setter
    def starting_quantity(self, starting_quantity):
        """Sets the starting_quantity of this PlanQuantity.

        Starting units quantity of the subscription. Mandatory if `pricing_model` is `TIERED` or `VOLUME`  # noqa: E501

        :param starting_quantity: The starting_quantity of this PlanQuantity.  # noqa: E501
        :type: int
        """
        if starting_quantity is not None and starting_quantity < 1:  # noqa: E501
            raise ValueError(
                "Invalid value for `starting_quantity`, must be a value greater than or equal to `1`"
            )  # noqa: E501

        self._starting_quantity = starting_quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(PlanQuantity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanQuantity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
