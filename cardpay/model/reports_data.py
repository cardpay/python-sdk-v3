# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "end_date": "date",
        "report_type": "list[str]",
        "start_date": "date",
    }

    attribute_map = {
        "end_date": "end_date",
        "report_type": "report_type",
        "start_date": "start_date",
    }

    def __init__(self, end_date=None, report_type=None, start_date=None):  # noqa: E501
        """ReportsData - a model defined in Swagger"""  # noqa: E501

        self._end_date = None
        self._report_type = None
        self._start_date = None
        self.discriminator = None

        if end_date is not None:
            self.end_date = end_date
        if report_type is not None:
            self.report_type = report_type
        self.start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ReportsData.  # noqa: E501

        End date of period on which the reports were generated. Period between dates is no more than 7 days.  The format is yyyy-MM-dd  If ‘end_date’ is skipped then default value is used: ‘start_date’ + 7 days  # noqa: E501

        :return: The end_date of this ReportsData.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ReportsData.

        End date of period on which the reports were generated. Period between dates is no more than 7 days.  The format is yyyy-MM-dd  If ‘end_date’ is skipped then default value is used: ‘start_date’ + 7 days  # noqa: E501

        :param end_date: The end_date of this ReportsData.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def report_type(self):
        """Gets the report_type of this ReportsData.  # noqa: E501

        Specific report type. Now are available: \"regular_settlement\", \"icpp_settlement\"  # noqa: E501

        :return: The report_type of this ReportsData.  # noqa: E501
        :rtype: list[str]
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportsData.

        Specific report type. Now are available: \"regular_settlement\", \"icpp_settlement\"  # noqa: E501

        :param report_type: The report_type of this ReportsData.  # noqa: E501
        :type: list[str]
        """

        self._report_type = report_type

    @property
    def start_date(self):
        """Gets the start_date of this ReportsData.  # noqa: E501

        Start date of period on which the reports were generated. The format is yyyy-MM-dd  # noqa: E501

        :return: The start_date of this ReportsData.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ReportsData.

        Start date of period on which the reports were generated. The format is yyyy-MM-dd  # noqa: E501

        :param start_date: The start_date of this ReportsData.  # noqa: E501
        :type: date
        """
        if start_date is None:
            raise ValueError(
                "Invalid value for `start_date`, must not be `None`"
            )  # noqa: E501

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(ReportsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
