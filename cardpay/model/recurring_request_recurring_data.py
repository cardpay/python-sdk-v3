# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cardpay.model.plan import Plan  # noqa: F401,E501
from cardpay.model.recurring_request_filing import (
    RecurringRequestFiling,
)  # noqa: F401,E501


class RecurringRequestRecurringData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "amount": "float",
        "contract_number": "str",
        "currency": "str",
        "dynamic_descriptor": "str",
        "encrypted_data": "str",
        "filing": "RecurringRequestFiling",
        "generate_token": "bool",
        "initial_amount": "float",
        "initiator": "str",
        "interval": "int",
        "note": "str",
        "payments": "int",
        "period": "str",
        "plan": "Plan",
        "preauth": "bool",
        "retries": "int",
        "scheduled_type": "str",
        "subscription_start": "datetime",
        "trans_type": "str",
    }

    attribute_map = {
        "amount": "amount",
        "contract_number": "contract_number",
        "currency": "currency",
        "dynamic_descriptor": "dynamic_descriptor",
        "encrypted_data": "encrypted_data",
        "filing": "filing",
        "generate_token": "generate_token",
        "initial_amount": "initial_amount",
        "initiator": "initiator",
        "interval": "interval",
        "note": "note",
        "payments": "payments",
        "period": "period",
        "plan": "plan",
        "preauth": "preauth",
        "retries": "retries",
        "scheduled_type": "scheduled_type",
        "subscription_start": "subscription_start",
        "trans_type": "trans_type",
    }

    def __init__(
        self,
        amount=None,
        contract_number=None,
        currency=None,
        dynamic_descriptor=None,
        encrypted_data=None,
        filing=None,
        generate_token=None,
        initial_amount=None,
        initiator=None,
        interval=None,
        note=None,
        payments=None,
        period=None,
        plan=None,
        preauth=None,
        retries=None,
        scheduled_type=None,
        subscription_start=None,
        trans_type=None,
    ):  # noqa: E501
        """RecurringRequestRecurringData - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._contract_number = None
        self._currency = None
        self._dynamic_descriptor = None
        self._encrypted_data = None
        self._filing = None
        self._generate_token = None
        self._initial_amount = None
        self._initiator = None
        self._interval = None
        self._note = None
        self._payments = None
        self._period = None
        self._plan = None
        self._preauth = None
        self._retries = None
        self._scheduled_type = None
        self._subscription_start = None
        self._trans_type = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if contract_number is not None:
            self.contract_number = contract_number
        if currency is not None:
            self.currency = currency
        if dynamic_descriptor is not None:
            self.dynamic_descriptor = dynamic_descriptor
        if encrypted_data is not None:
            self.encrypted_data = encrypted_data
        if filing is not None:
            self.filing = filing
        if generate_token is not None:
            self.generate_token = generate_token
        if initial_amount is not None:
            self.initial_amount = initial_amount
        if initiator is not None:
            self.initiator = initiator
        if interval is not None:
            self.interval = interval
        if note is not None:
            self.note = note
        if payments is not None:
            self.payments = payments
        if period is not None:
            self.period = period
        if plan is not None:
            self.plan = plan
        if preauth is not None:
            self.preauth = preauth
        if retries is not None:
            self.retries = retries
        if scheduled_type is not None:
            self.scheduled_type = scheduled_type
        if subscription_start is not None:
            self.subscription_start = subscription_start
        if trans_type is not None:
            self.trans_type = trans_type

    @property
    def amount(self):
        """Gets the amount of this RecurringRequestRecurringData.  # noqa: E501

        The total transaction amount in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501

        :return: The amount of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RecurringRequestRecurringData.

        The total transaction amount in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501

        :param amount: The amount of this RecurringRequestRecurringData.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def contract_number(self):
        """Gets the contract_number of this RecurringRequestRecurringData.  # noqa: E501

        Contract number between customer and merchant. Required for Mexican merchants for scheduled payments.  # noqa: E501

        :return: The contract_number of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._contract_number

    @contract_number.setter
    def contract_number(self, contract_number):
        """Sets the contract_number of this RecurringRequestRecurringData.

        Contract number between customer and merchant. Required for Mexican merchants for scheduled payments.  # noqa: E501

        :param contract_number: The contract_number of this RecurringRequestRecurringData.  # noqa: E501
        :type: str
        """

        self._contract_number = contract_number

    @property
    def currency(self):
        """Gets the currency of this RecurringRequestRecurringData.  # noqa: E501

        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501

        :return: The currency of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RecurringRequestRecurringData.

        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501

        :param currency: The currency of this RecurringRequestRecurringData.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def dynamic_descriptor(self):
        """Gets the dynamic_descriptor of this RecurringRequestRecurringData.  # noqa: E501

        Short description of the service or product, must be enabled by CardPay manager to be used.  # noqa: E501

        :return: The dynamic_descriptor of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_descriptor

    @dynamic_descriptor.setter
    def dynamic_descriptor(self, dynamic_descriptor):
        """Sets the dynamic_descriptor of this RecurringRequestRecurringData.

        Short description of the service or product, must be enabled by CardPay manager to be used.  # noqa: E501

        :param dynamic_descriptor: The dynamic_descriptor of this RecurringRequestRecurringData.  # noqa: E501
        :type: str
        """
        if dynamic_descriptor is not None and len(dynamic_descriptor) > 25:
            raise ValueError(
                "Invalid value for `dynamic_descriptor`, length must be less than or equal to `25`"
            )  # noqa: E501
        if dynamic_descriptor is not None and len(dynamic_descriptor) < 0:
            raise ValueError(
                "Invalid value for `dynamic_descriptor`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._dynamic_descriptor = dynamic_descriptor

    @property
    def encrypted_data(self):
        """Gets the encrypted_data of this RecurringRequestRecurringData.  # noqa: E501

        The encrypted payment credentials encoded in Base64  # noqa: E501

        :return: The encrypted_data of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_data

    @encrypted_data.setter
    def encrypted_data(self, encrypted_data):
        """Sets the encrypted_data of this RecurringRequestRecurringData.

        The encrypted payment credentials encoded in Base64  # noqa: E501

        :param encrypted_data: The encrypted_data of this RecurringRequestRecurringData.  # noqa: E501
        :type: str
        """
        if encrypted_data is not None and len(encrypted_data) > 10000:
            raise ValueError(
                "Invalid value for `encrypted_data`, length must be less than or equal to `10000`"
            )  # noqa: E501
        if encrypted_data is not None and len(encrypted_data) < 0:
            raise ValueError(
                "Invalid value for `encrypted_data`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._encrypted_data = encrypted_data

    @property
    def filing(self):
        """Gets the filing of this RecurringRequestRecurringData.  # noqa: E501

        Filing data, should be send in all recurring requests besides first recurring request First recurring request should be send without filing attribute  # noqa: E501

        :return: The filing of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: RecurringRequestFiling
        """
        return self._filing

    @filing.setter
    def filing(self, filing):
        """Sets the filing of this RecurringRequestRecurringData.

        Filing data, should be send in all recurring requests besides first recurring request First recurring request should be send without filing attribute  # noqa: E501

        :param filing: The filing of this RecurringRequestRecurringData.  # noqa: E501
        :type: RecurringRequestFiling
        """

        self._filing = filing

    @property
    def generate_token(self):
        """Gets the generate_token of this RecurringRequestRecurringData.  # noqa: E501

        This attribute can be received only in first recurring request. In all requests with recurring_id card.token can't be generated. If set to 'true', card token will be generated and returned in GET response. Will be generated only for successful transactions (not for declined).  # noqa: E501

        :return: The generate_token of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: bool
        """
        return self._generate_token

    @generate_token.setter
    def generate_token(self, generate_token):
        """Sets the generate_token of this RecurringRequestRecurringData.

        This attribute can be received only in first recurring request. In all requests with recurring_id card.token can't be generated. If set to 'true', card token will be generated and returned in GET response. Will be generated only for successful transactions (not for declined).  # noqa: E501

        :param generate_token: The generate_token of this RecurringRequestRecurringData.  # noqa: E501
        :type: bool
        """

        self._generate_token = generate_token

    @property
    def initial_amount(self):
        """Gets the initial_amount of this RecurringRequestRecurringData.  # noqa: E501

        The amount charged for the initial period from the creation of the transaction to the start date of the subscription ('subscription_start'). It is indicated by the merchant in case of a discount or extra charge. It pays once during subscription.  # noqa: E501

        :return: The initial_amount of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: float
        """
        return self._initial_amount

    @initial_amount.setter
    def initial_amount(self, initial_amount):
        """Sets the initial_amount of this RecurringRequestRecurringData.

        The amount charged for the initial period from the creation of the transaction to the start date of the subscription ('subscription_start'). It is indicated by the merchant in case of a discount or extra charge. It pays once during subscription.  # noqa: E501

        :param initial_amount: The initial_amount of this RecurringRequestRecurringData.  # noqa: E501
        :type: float
        """

        self._initial_amount = initial_amount

    @property
    def initiator(self):
        """Gets the initiator of this RecurringRequestRecurringData.  # noqa: E501

        Can be only 2 values: `mit` (merchant initiated transaction), `cit` (cardholder initiated transaction)  # noqa: E501

        :return: The initiator of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this RecurringRequestRecurringData.

        Can be only 2 values: `mit` (merchant initiated transaction), `cit` (cardholder initiated transaction)  # noqa: E501

        :param initiator: The initiator of this RecurringRequestRecurringData.  # noqa: E501
        :type: str
        """
        if initiator is not None and not re.search(r"mit|cit", initiator):  # noqa: E501
            raise ValueError(
                r"Invalid value for `initiator`, must be a follow pattern or equal to `/mit|cit/`"
            )  # noqa: E501

        self._initiator = initiator

    @property
    def interval(self):
        """Gets the interval of this RecurringRequestRecurringData.  # noqa: E501

        Frequency interval of period, can be 1-365 depending on selected period value. Minimum value of period + interval can be 7 days / 1 week. Maximum value of period + interval plan can be 365 days / 52 weeks / 12 months / 1 year. 1-60 minutes - for **sandbox environment** and testing purpose only.  # noqa: E501

        :return: The interval of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this RecurringRequestRecurringData.

        Frequency interval of period, can be 1-365 depending on selected period value. Minimum value of period + interval can be 7 days / 1 week. Maximum value of period + interval plan can be 365 days / 52 weeks / 12 months / 1 year. 1-60 minutes - for **sandbox environment** and testing purpose only.  # noqa: E501

        :param interval: The interval of this RecurringRequestRecurringData.  # noqa: E501
        :type: int
        """
        if interval is not None and interval < 1:  # noqa: E501
            raise ValueError(
                "Invalid value for `interval`, must be a value greater than or equal to `1`"
            )  # noqa: E501

        self._interval = interval

    @property
    def note(self):
        """Gets the note of this RecurringRequestRecurringData.  # noqa: E501

        Note about the recurring that will not be displayed to customer.  # noqa: E501

        :return: The note of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this RecurringRequestRecurringData.

        Note about the recurring that will not be displayed to customer.  # noqa: E501

        :param note: The note of this RecurringRequestRecurringData.  # noqa: E501
        :type: str
        """
        if note is not None and len(note) > 100:
            raise ValueError(
                "Invalid value for `note`, length must be less than or equal to `100`"
            )  # noqa: E501
        if note is not None and len(note) < 0:
            raise ValueError(
                "Invalid value for `note`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._note = note

    @property
    def payments(self):
        """Gets the payments of this RecurringRequestRecurringData.  # noqa: E501

        Number of total payments to be charged per defined interval, can be 2-200.  # noqa: E501

        :return: The payments of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: int
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this RecurringRequestRecurringData.

        Number of total payments to be charged per defined interval, can be 2-200.  # noqa: E501

        :param payments: The payments of this RecurringRequestRecurringData.  # noqa: E501
        :type: int
        """
        if payments is not None and payments > 200:  # noqa: E501
            raise ValueError(
                "Invalid value for `payments`, must be a value less than or equal to `200`"
            )  # noqa: E501
        if payments is not None and payments < 2:  # noqa: E501
            raise ValueError(
                "Invalid value for `payments`, must be a value greater than or equal to `2`"
            )  # noqa: E501

        self._payments = payments

    class Period(object):
        MINUTE = "minute"
        DAY = "day"
        WEEK = "week"
        MONTH = "month"
        YEAR = "year"

    @property
    def period(self):
        """Gets the period of this RecurringRequestRecurringData.  # noqa: E501

        Initial period of recurring, can be `day`, `week`, `month`, `year`.  `minute` - for **sandbox environment** and testing purpose only.  # noqa: E501

        :return: The period of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this RecurringRequestRecurringData.

        Initial period of recurring, can be `day`, `week`, `month`, `year`.  `minute` - for **sandbox environment** and testing purpose only.  # noqa: E501

        :param period: The period of this RecurringRequestRecurringData.  # noqa: E501
        :type: str
        """
        allowed_values = ["minute", "day", "week", "month", "year"]  # noqa: E501
        if period not in allowed_values:
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}".format(  # noqa: E501
                    period, allowed_values
                )
            )

        self._period = period

    @property
    def plan(self):
        """Gets the plan of this RecurringRequestRecurringData.  # noqa: E501

        Plan data  # noqa: E501

        :return: The plan of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this RecurringRequestRecurringData.

        Plan data  # noqa: E501

        :param plan: The plan of this RecurringRequestRecurringData.  # noqa: E501
        :type: Plan
        """

        self._plan = plan

    @property
    def preauth(self):
        """Gets the preauth of this RecurringRequestRecurringData.  # noqa: E501

        This parameter is allowed to be used only for first recurring payment. If set to `true`, the amount will not be captured but only blocked *(for BANKCARD payment method only)*.  # noqa: E501

        :return: The preauth of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: bool
        """
        return self._preauth

    @preauth.setter
    def preauth(self, preauth):
        """Sets the preauth of this RecurringRequestRecurringData.

        This parameter is allowed to be used only for first recurring payment. If set to `true`, the amount will not be captured but only blocked *(for BANKCARD payment method only)*.  # noqa: E501

        :param preauth: The preauth of this RecurringRequestRecurringData.  # noqa: E501
        :type: bool
        """

        self._preauth = preauth

    @property
    def retries(self):
        """Gets the retries of this RecurringRequestRecurringData.  # noqa: E501

        Number of daily basis retry attempts in case of payment has not been captured successfully, from 1 to 15 attempts can be specified.  # noqa: E501

        :return: The retries of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this RecurringRequestRecurringData.

        Number of daily basis retry attempts in case of payment has not been captured successfully, from 1 to 15 attempts can be specified.  # noqa: E501

        :param retries: The retries of this RecurringRequestRecurringData.  # noqa: E501
        :type: int
        """
        if retries is not None and retries > 15:  # noqa: E501
            raise ValueError(
                "Invalid value for `retries`, must be a value less than or equal to `15`"
            )  # noqa: E501
        if retries is not None and retries < 1:  # noqa: E501
            raise ValueError(
                "Invalid value for `retries`, must be a value greater than or equal to `1`"
            )  # noqa: E501

        self._retries = retries

    @property
    def scheduled_type(self):
        """Gets the scheduled_type of this RecurringRequestRecurringData.  # noqa: E501

        Scheduled payment type attribute. For scheduled payments by merchant value should be `SM` - scheduled by merchant  # noqa: E501

        :return: The scheduled_type of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_type

    @scheduled_type.setter
    def scheduled_type(self, scheduled_type):
        """Sets the scheduled_type of this RecurringRequestRecurringData.

        Scheduled payment type attribute. For scheduled payments by merchant value should be `SM` - scheduled by merchant  # noqa: E501

        :param scheduled_type: The scheduled_type of this RecurringRequestRecurringData.  # noqa: E501
        :type: str
        """
        if scheduled_type is not None and not re.search(
            r"SA|SM", scheduled_type
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `scheduled_type`, must be a follow pattern or equal to `/SA|SM/`"
            )  # noqa: E501

        self._scheduled_type = scheduled_type

    @property
    def subscription_start(self):
        """Gets the subscription_start of this RecurringRequestRecurringData.  # noqa: E501

        The date in yyyy-MM-dd format when subscription will actually become activated (grace period). Auth request will be created but Customer will be charged only when subscription start date comes. Leave it empty or specify the current date to activate subscription at once without any grace period applied.  # noqa: E501

        :return: The subscription_start of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: datetime
        """
        return self._subscription_start

    @subscription_start.setter
    def subscription_start(self, subscription_start):
        """Sets the subscription_start of this RecurringRequestRecurringData.

        The date in yyyy-MM-dd format when subscription will actually become activated (grace period). Auth request will be created but Customer will be charged only when subscription start date comes. Leave it empty or specify the current date to activate subscription at once without any grace period applied.  # noqa: E501

        :param subscription_start: The subscription_start of this RecurringRequestRecurringData.  # noqa: E501
        :type: datetime
        """

        self._subscription_start = subscription_start

    @property
    def trans_type(self):
        """Gets the trans_type of this RecurringRequestRecurringData.  # noqa: E501

        Identifies the type of transaction being authenticated  # noqa: E501

        :return: The trans_type of this RecurringRequestRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._trans_type

    @trans_type.setter
    def trans_type(self, trans_type):
        """Sets the trans_type of this RecurringRequestRecurringData.

        Identifies the type of transaction being authenticated  # noqa: E501

        :param trans_type: The trans_type of this RecurringRequestRecurringData.  # noqa: E501
        :type: str
        """

        self._trans_type = trans_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(RecurringRequestRecurringData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecurringRequestRecurringData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
