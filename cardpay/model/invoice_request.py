# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cardpay.model.invoice_customer import InvoiceCustomer  # noqa: F401,E501
from cardpay.model.invoice_data import InvoiceData  # noqa: F401,E501
from cardpay.model.invoice_merchant_order import InvoiceMerchantOrder  # noqa: F401,E501
from cardpay.model.request import Request  # noqa: F401,E501
from cardpay.model.return_urls import ReturnUrls  # noqa: F401,E501


class InvoiceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "request": "Request",
        "customer": "InvoiceCustomer",
        "invoice_data": "InvoiceData",
        "merchant_order": "InvoiceMerchantOrder",
        "return_urls": "ReturnUrls",
    }

    attribute_map = {
        "request": "request",
        "customer": "customer",
        "invoice_data": "invoice_data",
        "merchant_order": "merchant_order",
        "return_urls": "return_urls",
    }

    def __init__(
        self,
        request=None,
        customer=None,
        invoice_data=None,
        merchant_order=None,
        return_urls=None,
    ):  # noqa: E501
        """InvoiceRequest - a model defined in Swagger"""  # noqa: E501

        self._request = None
        self._customer = None
        self._invoice_data = None
        self._merchant_order = None
        self._return_urls = None
        self.discriminator = None

        self.request = request
        if customer is not None:
            self.customer = customer
        self.invoice_data = invoice_data
        self.merchant_order = merchant_order
        if return_urls is not None:
            self.return_urls = return_urls

    @property
    def request(self):
        """Gets the request of this InvoiceRequest.  # noqa: E501

        Request  # noqa: E501

        :return: The request of this InvoiceRequest.  # noqa: E501
        :rtype: Request
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this InvoiceRequest.

        Request  # noqa: E501

        :param request: The request of this InvoiceRequest.  # noqa: E501
        :type: Request
        """
        if request is None:
            raise ValueError(
                "Invalid value for `request`, must not be `None`"
            )  # noqa: E501

        self._request = request

    @property
    def customer(self):
        """Gets the customer of this InvoiceRequest.  # noqa: E501

        Customer data  # noqa: E501

        :return: The customer of this InvoiceRequest.  # noqa: E501
        :rtype: InvoiceCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this InvoiceRequest.

        Customer data  # noqa: E501

        :param customer: The customer of this InvoiceRequest.  # noqa: E501
        :type: InvoiceCustomer
        """

        self._customer = customer

    @property
    def invoice_data(self):
        """Gets the invoice_data of this InvoiceRequest.  # noqa: E501

        Invoice data  # noqa: E501

        :return: The invoice_data of this InvoiceRequest.  # noqa: E501
        :rtype: InvoiceData
        """
        return self._invoice_data

    @invoice_data.setter
    def invoice_data(self, invoice_data):
        """Sets the invoice_data of this InvoiceRequest.

        Invoice data  # noqa: E501

        :param invoice_data: The invoice_data of this InvoiceRequest.  # noqa: E501
        :type: InvoiceData
        """
        if invoice_data is None:
            raise ValueError(
                "Invalid value for `invoice_data`, must not be `None`"
            )  # noqa: E501

        self._invoice_data = invoice_data

    @property
    def merchant_order(self):
        """Gets the merchant_order of this InvoiceRequest.  # noqa: E501

        Merchant order data  # noqa: E501

        :return: The merchant_order of this InvoiceRequest.  # noqa: E501
        :rtype: InvoiceMerchantOrder
        """
        return self._merchant_order

    @merchant_order.setter
    def merchant_order(self, merchant_order):
        """Sets the merchant_order of this InvoiceRequest.

        Merchant order data  # noqa: E501

        :param merchant_order: The merchant_order of this InvoiceRequest.  # noqa: E501
        :type: InvoiceMerchantOrder
        """
        if merchant_order is None:
            raise ValueError(
                "Invalid value for `merchant_order`, must not be `None`"
            )  # noqa: E501

        self._merchant_order = merchant_order

    @property
    def return_urls(self):
        """Gets the return_urls of this InvoiceRequest.  # noqa: E501

        Return URLs are the URLs where customer returns by pressing 'Back to the shop' or 'Cancel' button in Payment Page mode  # noqa: E501

        :return: The return_urls of this InvoiceRequest.  # noqa: E501
        :rtype: ReturnUrls
        """
        return self._return_urls

    @return_urls.setter
    def return_urls(self, return_urls):
        """Sets the return_urls of this InvoiceRequest.

        Return URLs are the URLs where customer returns by pressing 'Back to the shop' or 'Cancel' button in Payment Page mode  # noqa: E501

        :param return_urls: The return_urls of this InvoiceRequest.  # noqa: E501
        :type: ReturnUrls
        """

        self._return_urls = return_urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(InvoiceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
