# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cardpay.model.three_d_secure_response import (
    ThreeDSecureResponse,
)  # noqa: F401,E501


class AuthenticationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "amount": "float",
        "created": "str",
        "currency": "str",
        "decline_code": "str",
        "decline_reason": "str",
        "id": "str",
        "status": "str",
        "three_d_secure": "ThreeDSecureResponse",
        "trans_type": "str",
        "type": "str",
    }

    attribute_map = {
        "amount": "amount",
        "created": "created",
        "currency": "currency",
        "decline_code": "decline_code",
        "decline_reason": "decline_reason",
        "id": "id",
        "status": "status",
        "three_d_secure": "three_d_secure",
        "trans_type": "trans_type",
        "type": "type",
    }

    def __init__(
        self,
        amount=None,
        created=None,
        currency=None,
        decline_code=None,
        decline_reason=None,
        id=None,
        status=None,
        three_d_secure=None,
        trans_type=None,
        type=None,
    ):  # noqa: E501
        """AuthenticationData - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._created = None
        self._currency = None
        self._decline_code = None
        self._decline_reason = None
        self._id = None
        self._status = None
        self._three_d_secure = None
        self._trans_type = None
        self._type = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if created is not None:
            self.created = created
        if currency is not None:
            self.currency = currency
        if decline_code is not None:
            self.decline_code = decline_code
        if decline_reason is not None:
            self.decline_reason = decline_reason
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if three_d_secure is not None:
            self.three_d_secure = three_d_secure
        if trans_type is not None:
            self.trans_type = trans_type
        if type is not None:
            self.type = type

    @property
    def amount(self):
        """Gets the amount of this AuthenticationData.  # noqa: E501

        Payment amount  # noqa: E501

        :return: The amount of this AuthenticationData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AuthenticationData.

        Payment amount  # noqa: E501

        :param amount: The amount of this AuthenticationData.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def created(self):
        """Gets the created of this AuthenticationData.  # noqa: E501

        Time when this payment started in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501

        :return: The created of this AuthenticationData.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AuthenticationData.

        Time when this payment started in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501

        :param created: The created of this AuthenticationData.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def currency(self):
        """Gets the currency of this AuthenticationData.  # noqa: E501

        Payment currency code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code)  # noqa: E501

        :return: The currency of this AuthenticationData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AuthenticationData.

        Payment currency code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code)  # noqa: E501

        :param currency: The currency of this AuthenticationData.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def decline_code(self):
        """Gets the decline_code of this AuthenticationData.  # noqa: E501

        Decline code (only in decline case)  # noqa: E501

        :return: The decline_code of this AuthenticationData.  # noqa: E501
        :rtype: str
        """
        return self._decline_code

    @decline_code.setter
    def decline_code(self, decline_code):
        """Sets the decline_code of this AuthenticationData.

        Decline code (only in decline case)  # noqa: E501

        :param decline_code: The decline_code of this AuthenticationData.  # noqa: E501
        :type: str
        """

        self._decline_code = decline_code

    @property
    def decline_reason(self):
        """Gets the decline_reason of this AuthenticationData.  # noqa: E501

        Bank's message about transaction decline reason (only in decline case)  # noqa: E501

        :return: The decline_reason of this AuthenticationData.  # noqa: E501
        :rtype: str
        """
        return self._decline_reason

    @decline_reason.setter
    def decline_reason(self, decline_reason):
        """Sets the decline_reason of this AuthenticationData.

        Bank's message about transaction decline reason (only in decline case)  # noqa: E501

        :param decline_reason: The decline_reason of this AuthenticationData.  # noqa: E501
        :type: str
        """

        self._decline_reason = decline_reason

    @property
    def id(self):
        """Gets the id of this AuthenticationData.  # noqa: E501

        Unlimint's payment id  # noqa: E501

        :return: The id of this AuthenticationData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthenticationData.

        Unlimint's payment id  # noqa: E501

        :param id: The id of this AuthenticationData.  # noqa: E501
        :type: str
        """

        self._id = id

    class Status(object):
        NEW = "NEW"
        IN_PROGRESS = "IN_PROGRESS"
        DECLINED = "DECLINED"
        AUTHORIZED = "AUTHORIZED"
        COMPLETED = "COMPLETED"
        CANCELLED = "CANCELLED"
        REFUNDED = "REFUNDED"
        PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED"
        VOIDED = "VOIDED"
        TERMINATED = "TERMINATED"
        CHARGED_BACK = "CHARGED_BACK"
        CHARGEBACK_RESOLVED = "CHARGEBACK_RESOLVED"

    @property
    def status(self):
        """Gets the status of this AuthenticationData.  # noqa: E501

        Current payment status  # noqa: E501

        :return: The status of this AuthenticationData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AuthenticationData.

        Current payment status  # noqa: E501

        :param status: The status of this AuthenticationData.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "NEW",
            "IN_PROGRESS",
            "DECLINED",
            "AUTHORIZED",
            "COMPLETED",
            "CANCELLED",
            "REFUNDED",
            "PARTIALLY_REFUNDED",
            "VOIDED",
            "TERMINATED",
            "CHARGED_BACK",
            "CHARGEBACK_RESOLVED",
        ]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def three_d_secure(self):
        """Gets the three_d_secure of this AuthenticationData.  # noqa: E501

        3D Secure results data  # noqa: E501

        :return: The three_d_secure of this AuthenticationData.  # noqa: E501
        :rtype: ThreeDSecureResponse
        """
        return self._three_d_secure

    @three_d_secure.setter
    def three_d_secure(self, three_d_secure):
        """Sets the three_d_secure of this AuthenticationData.

        3D Secure results data  # noqa: E501

        :param three_d_secure: The three_d_secure of this AuthenticationData.  # noqa: E501
        :type: ThreeDSecureResponse
        """

        self._three_d_secure = three_d_secure

    class TransType(object):
        _01 = "01"
        _03 = "03"
        _10 = "10"
        _11 = "11"
        _28 = "28"

    @property
    def trans_type(self):
        """Gets the trans_type of this AuthenticationData.  # noqa: E501


        :return: The trans_type of this AuthenticationData.  # noqa: E501
        :rtype: str
        """
        return self._trans_type

    @trans_type.setter
    def trans_type(self, trans_type):
        """Sets the trans_type of this AuthenticationData.


        :param trans_type: The trans_type of this AuthenticationData.  # noqa: E501
        :type: str
        """
        allowed_values = ["01", "03", "10", "11", "28"]  # noqa: E501
        if trans_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trans_type` ({0}), must be one of {1}".format(  # noqa: E501
                    trans_type, allowed_values
                )
            )

        self._trans_type = trans_type

    @property
    def type(self):
        """Gets the type of this AuthenticationData.  # noqa: E501


        :return: The type of this AuthenticationData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuthenticationData.


        :param type: The type of this AuthenticationData.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(AuthenticationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
