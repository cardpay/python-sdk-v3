# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InvoiceGetDataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "amount": "float",
        "currency": "str",
        "expire_at": "datetime",
        "id": "str",
        "status": "str",
    }

    attribute_map = {
        "amount": "amount",
        "currency": "currency",
        "expire_at": "expire_at",
        "id": "id",
        "status": "status",
    }

    def __init__(
        self, amount=None, currency=None, expire_at=None, id=None, status=None
    ):  # noqa: E501
        """InvoiceGetDataResponse - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._currency = None
        self._expire_at = None
        self._id = None
        self._status = None
        self.discriminator = None

        self.amount = amount
        self.currency = currency
        if expire_at is not None:
            self.expire_at = expire_at
        self.id = id
        if status is not None:
            self.status = status

    @property
    def amount(self):
        """Gets the amount of this InvoiceGetDataResponse.  # noqa: E501

        The total invoice amount in selected currency with dot as a decimal separator  # noqa: E501

        :return: The amount of this InvoiceGetDataResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceGetDataResponse.

        The total invoice amount in selected currency with dot as a decimal separator  # noqa: E501

        :param amount: The amount of this InvoiceGetDataResponse.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError(
                "Invalid value for `amount`, must not be `None`"
            )  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this InvoiceGetDataResponse.  # noqa: E501

        ISO 4217 currency code  # noqa: E501

        :return: The currency of this InvoiceGetDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InvoiceGetDataResponse.

        ISO 4217 currency code  # noqa: E501

        :param currency: The currency of this InvoiceGetDataResponse.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError(
                "Invalid value for `currency`, must not be `None`"
            )  # noqa: E501

        self._currency = currency

    @property
    def expire_at(self):
        """Gets the expire_at of this InvoiceGetDataResponse.  # noqa: E501

        Date of invoice expiring. Invoice cannot be used after this date.  # noqa: E501

        :return: The expire_at of this InvoiceGetDataResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this InvoiceGetDataResponse.

        Date of invoice expiring. Invoice cannot be used after this date.  # noqa: E501

        :param expire_at: The expire_at of this InvoiceGetDataResponse.  # noqa: E501
        :type: datetime
        """

        self._expire_at = expire_at

    @property
    def id(self):
        """Gets the id of this InvoiceGetDataResponse.  # noqa: E501

        Identifier of created invoice.  # noqa: E501

        :return: The id of this InvoiceGetDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceGetDataResponse.

        Identifier of created invoice.  # noqa: E501

        :param id: The id of this InvoiceGetDataResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this InvoiceGetDataResponse.  # noqa: E501

        Status of invoice.  # noqa: E501

        :return: The status of this InvoiceGetDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InvoiceGetDataResponse.

        Status of invoice.  # noqa: E501

        :param status: The status of this InvoiceGetDataResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(InvoiceGetDataResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceGetDataResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
