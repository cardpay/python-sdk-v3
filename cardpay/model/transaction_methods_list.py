# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cardpay.model.payment_methods_response import (
    PaymentMethodsResponse,
)  # noqa: F401,E501


class TransactionMethodsList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "payment_methods": "list[PaymentMethodsResponse]",
        "payout_methods": "list[PaymentMethodsResponse]",
    }

    attribute_map = {
        "payment_methods": "payment_methods",
        "payout_methods": "payout_methods",
    }

    def __init__(self, payment_methods=None, payout_methods=None):  # noqa: E501
        """TransactionMethodsList - a model defined in Swagger"""  # noqa: E501

        self._payment_methods = None
        self._payout_methods = None
        self.discriminator = None

        if payment_methods is not None:
            self.payment_methods = payment_methods
        if payout_methods is not None:
            self.payout_methods = payout_methods

    @property
    def payment_methods(self):
        """Gets the payment_methods of this TransactionMethodsList.  # noqa: E501

        Payment methods list  # noqa: E501

        :return: The payment_methods of this TransactionMethodsList.  # noqa: E501
        :rtype: list[PaymentMethodsResponse]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this TransactionMethodsList.

        Payment methods list  # noqa: E501

        :param payment_methods: The payment_methods of this TransactionMethodsList.  # noqa: E501
        :type: list[PaymentMethodsResponse]
        """

        self._payment_methods = payment_methods

    @property
    def payout_methods(self):
        """Gets the payout_methods of this TransactionMethodsList.  # noqa: E501

        Payout methods list  # noqa: E501

        :return: The payout_methods of this TransactionMethodsList.  # noqa: E501
        :rtype: list[PaymentMethodsResponse]
        """
        return self._payout_methods

    @payout_methods.setter
    def payout_methods(self, payout_methods):
        """Sets the payout_methods of this TransactionMethodsList.

        Payout methods list  # noqa: E501

        :param payout_methods: The payout_methods of this TransactionMethodsList.  # noqa: E501
        :type: list[PaymentMethodsResponse]
        """

        self._payout_methods = payout_methods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(TransactionMethodsList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionMethodsList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
