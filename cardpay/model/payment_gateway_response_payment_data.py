# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentGatewayResponsePaymentData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"id": "str", "separate_auth": "bool"}

    attribute_map = {"id": "id", "separate_auth": "separate_auth"}

    def __init__(self, id=None, separate_auth=None):  # noqa: E501
        """PaymentGatewayResponsePaymentData - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._separate_auth = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if separate_auth is not None:
            self.separate_auth = separate_auth

    @property
    def id(self):
        """Gets the id of this PaymentGatewayResponsePaymentData.  # noqa: E501

        Cardpay's payment id  # noqa: E501

        :return: The id of this PaymentGatewayResponsePaymentData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentGatewayResponsePaymentData.

        Cardpay's payment id  # noqa: E501

        :param id: The id of this PaymentGatewayResponsePaymentData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def separate_auth(self):
        """Gets the separate_auth of this PaymentGatewayResponsePaymentData.  # noqa: E501

        Means that authentication can be carried separately from the payment. Possible values: true -  authentication can be carried separately, false -  authentication can not be carried separately  # noqa: E501

        :return: The separate_auth of this PaymentGatewayResponsePaymentData.  # noqa: E501
        :rtype: bool
        """
        return self._separate_auth

    @separate_auth.setter
    def separate_auth(self, separate_auth):
        """Sets the separate_auth of this PaymentGatewayResponsePaymentData.

        Means that authentication can be carried separately from the payment. Possible values: true -  authentication can be carried separately, false -  authentication can not be carried separately  # noqa: E501

        :param separate_auth: The separate_auth of this PaymentGatewayResponsePaymentData.  # noqa: E501
        :type: bool
        """

        self._separate_auth = separate_auth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(PaymentGatewayResponsePaymentData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentGatewayResponsePaymentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
