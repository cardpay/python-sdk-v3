# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MobileTokenResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"expires": "str", "mobile_token": "str"}

    attribute_map = {"expires": "expires", "mobile_token": "mobile_token"}

    def __init__(self, expires=None, mobile_token=None):  # noqa: E501
        """MobileTokenResponse - a model defined in Swagger"""  # noqa: E501

        self._expires = None
        self._mobile_token = None
        self.discriminator = None

        if expires is not None:
            self.expires = expires
        if mobile_token is not None:
            self.mobile_token = mobile_token

    @property
    def expires(self):
        """Gets the expires of this MobileTokenResponse.  # noqa: E501

        Date and time of mobile token expiration in ISO 8601 format, example of format - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'  # noqa: E501

        :return: The expires of this MobileTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this MobileTokenResponse.

        Date and time of mobile token expiration in ISO 8601 format, example of format - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'  # noqa: E501

        :param expires: The expires of this MobileTokenResponse.  # noqa: E501
        :type: str
        """

        self._expires = expires

    @property
    def mobile_token(self):
        """Gets the mobile_token of this MobileTokenResponse.  # noqa: E501

        Unique identifier, max 128 symbols  # noqa: E501

        :return: The mobile_token of this MobileTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._mobile_token

    @mobile_token.setter
    def mobile_token(self, mobile_token):
        """Sets the mobile_token of this MobileTokenResponse.

        Unique identifier, max 128 symbols  # noqa: E501

        :param mobile_token: The mobile_token of this MobileTokenResponse.  # noqa: E501
        :type: str
        """

        self._mobile_token = mobile_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(MobileTokenResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MobileTokenResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
