# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "download_url": "str",
        "file_id": "str",
        "file_name": "str",
        "hash_sum": "str",
        "report_type": "str",
        "settlement_date": "str",
        "settlement_id": "int",
        "size": "int",
        "status": "str",
        "website_name": "str",
    }

    attribute_map = {
        "download_url": "download_url",
        "file_id": "file_id",
        "file_name": "file_name",
        "hash_sum": "hash_sum",
        "report_type": "report_type",
        "settlement_date": "settlement_date",
        "settlement_id": "settlement_id",
        "size": "size",
        "status": "status",
        "website_name": "website_name",
    }

    def __init__(
        self,
        download_url=None,
        file_id=None,
        file_name=None,
        hash_sum=None,
        report_type=None,
        settlement_date=None,
        settlement_id=None,
        size=None,
        status=None,
        website_name=None,
    ):  # noqa: E501
        """Report - a model defined in Swagger"""  # noqa: E501

        self._download_url = None
        self._file_id = None
        self._file_name = None
        self._hash_sum = None
        self._report_type = None
        self._settlement_date = None
        self._settlement_id = None
        self._size = None
        self._status = None
        self._website_name = None
        self.discriminator = None

        if download_url is not None:
            self.download_url = download_url
        if file_id is not None:
            self.file_id = file_id
        if file_name is not None:
            self.file_name = file_name
        if hash_sum is not None:
            self.hash_sum = hash_sum
        if report_type is not None:
            self.report_type = report_type
        if settlement_date is not None:
            self.settlement_date = settlement_date
        if settlement_id is not None:
            self.settlement_id = settlement_id
        if size is not None:
            self.size = size
        if status is not None:
            self.status = status
        if website_name is not None:
            self.website_name = website_name

    @property
    def download_url(self):
        """Gets the download_url of this Report.  # noqa: E501

        Link to archive downloading. Link is available for 24 hours  # noqa: E501

        :return: The download_url of this Report.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this Report.

        Link to archive downloading. Link is available for 24 hours  # noqa: E501

        :param download_url: The download_url of this Report.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def file_id(self):
        """Gets the file_id of this Report.  # noqa: E501

        The identifier of report's file  # noqa: E501

        :return: The file_id of this Report.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Report.

        The identifier of report's file  # noqa: E501

        :param file_id: The file_id of this Report.  # noqa: E501
        :type: str
        """

        self._file_id = file_id

    @property
    def file_name(self):
        """Gets the file_name of this Report.  # noqa: E501

        The file name  # noqa: E501

        :return: The file_name of this Report.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Report.

        The file name  # noqa: E501

        :param file_name: The file_name of this Report.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def hash_sum(self):
        """Gets the hash_sum of this Report.  # noqa: E501

        Hash sum of file (sha256)  # noqa: E501

        :return: The hash_sum of this Report.  # noqa: E501
        :rtype: str
        """
        return self._hash_sum

    @hash_sum.setter
    def hash_sum(self, hash_sum):
        """Sets the hash_sum of this Report.

        Hash sum of file (sha256)  # noqa: E501

        :param hash_sum: The hash_sum of this Report.  # noqa: E501
        :type: str
        """

        self._hash_sum = hash_sum

    @property
    def report_type(self):
        """Gets the report_type of this Report.  # noqa: E501

        Specific report type, one of: \"regular_settlement\", \"icpp_settlement\"  # noqa: E501

        :return: The report_type of this Report.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this Report.

        Specific report type, one of: \"regular_settlement\", \"icpp_settlement\"  # noqa: E501

        :param report_type: The report_type of this Report.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    @property
    def settlement_date(self):
        """Gets the settlement_date of this Report.  # noqa: E501

        Date of settlement. The format is yyyy-MM-dd  # noqa: E501

        :return: The settlement_date of this Report.  # noqa: E501
        :rtype: str
        """
        return self._settlement_date

    @settlement_date.setter
    def settlement_date(self, settlement_date):
        """Sets the settlement_date of this Report.

        Date of settlement. The format is yyyy-MM-dd  # noqa: E501

        :param settlement_date: The settlement_date of this Report.  # noqa: E501
        :type: str
        """

        self._settlement_date = settlement_date

    @property
    def settlement_id(self):
        """Gets the settlement_id of this Report.  # noqa: E501

        The identifier of settlement. Can be the same for several objects in sample  # noqa: E501

        :return: The settlement_id of this Report.  # noqa: E501
        :rtype: int
        """
        return self._settlement_id

    @settlement_id.setter
    def settlement_id(self, settlement_id):
        """Sets the settlement_id of this Report.

        The identifier of settlement. Can be the same for several objects in sample  # noqa: E501

        :param settlement_id: The settlement_id of this Report.  # noqa: E501
        :type: int
        """

        self._settlement_id = settlement_id

    @property
    def size(self):
        """Gets the size of this Report.  # noqa: E501

        Size of file in bytes  # noqa: E501

        :return: The size of this Report.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Report.

        Size of file in bytes  # noqa: E501

        :param size: The size of this Report.  # noqa: E501
        :type: int
        """

        self._size = size

    class Status(object):
        IN_PROGRESS = "IN_PROGRESS"
        COMPLETED = "COMPLETED"
        FAILED = "FAILED"

    @property
    def status(self):
        """Gets the status of this Report.  # noqa: E501

        One of statuses:  \"IN_PROGRESS\"  \"COMPLETED\"  \"FAILED\"  # noqa: E501

        :return: The status of this Report.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Report.

        One of statuses:  \"IN_PROGRESS\"  \"COMPLETED\"  \"FAILED\"  # noqa: E501

        :param status: The status of this Report.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "COMPLETED", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def website_name(self):
        """Gets the website_name of this Report.  # noqa: E501

        Name of website  # noqa: E501

        :return: The website_name of this Report.  # noqa: E501
        :rtype: str
        """
        return self._website_name

    @website_name.setter
    def website_name(self, website_name):
        """Sets the website_name of this Report.

        Name of website  # noqa: E501

        :param website_name: The website_name of this Report.  # noqa: E501
        :type: str
        """

        self._website_name = website_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
