# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cardpay.model.recurring_data import RecurringData  # noqa: F401,E501


class AuthDataRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "amount": "float",
        "currency": "str",
        "dynamic_descriptor": "str",
        "generate_token": "bool",
        "installment_amount": "float",
        "installment_type": "str",
        "installments": "list[int]",
        "note": "str",
        "recurring_data": "RecurringData",
        "sca_exemption": "str",
        "three_ds_challenge_indicator": "str",
        "trans_type": "str",
        "type": "str",
    }

    attribute_map = {
        "amount": "amount",
        "currency": "currency",
        "dynamic_descriptor": "dynamic_descriptor",
        "generate_token": "generate_token",
        "installment_amount": "installment_amount",
        "installment_type": "installment_type",
        "installments": "installments",
        "note": "note",
        "recurring_data": "recurring_data",
        "sca_exemption": "sca_exemption",
        "three_ds_challenge_indicator": "three_ds_challenge_indicator",
        "trans_type": "trans_type",
        "type": "type",
    }

    def __init__(
        self,
        amount=None,
        currency=None,
        dynamic_descriptor=None,
        generate_token=None,
        installment_amount=None,
        installment_type=None,
        installments=None,
        note=None,
        recurring_data=None,
        sca_exemption=None,
        three_ds_challenge_indicator=None,
        trans_type=None,
        type=None,
    ):  # noqa: E501
        """AuthDataRequest - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._currency = None
        self._dynamic_descriptor = None
        self._generate_token = None
        self._installment_amount = None
        self._installment_type = None
        self._installments = None
        self._note = None
        self._recurring_data = None
        self._sca_exemption = None
        self._three_ds_challenge_indicator = None
        self._trans_type = None
        self._type = None
        self.discriminator = None

        self.amount = amount
        self.currency = currency
        if dynamic_descriptor is not None:
            self.dynamic_descriptor = dynamic_descriptor
        if generate_token is not None:
            self.generate_token = generate_token
        if installment_amount is not None:
            self.installment_amount = installment_amount
        if installment_type is not None:
            self.installment_type = installment_type
        if installments is not None:
            self.installments = installments
        if note is not None:
            self.note = note
        if recurring_data is not None:
            self.recurring_data = recurring_data
        if sca_exemption is not None:
            self.sca_exemption = sca_exemption
        if three_ds_challenge_indicator is not None:
            self.three_ds_challenge_indicator = three_ds_challenge_indicator
        if trans_type is not None:
            self.trans_type = trans_type
        if type is not None:
            self.type = type

    @property
    def amount(self):
        """Gets the amount of this AuthDataRequest.  # noqa: E501

        The total invoice amount in selected currency with dot as a decimal separator, must be less than 10 billion  # noqa: E501

        :return: The amount of this AuthDataRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AuthDataRequest.

        The total invoice amount in selected currency with dot as a decimal separator, must be less than 10 billion  # noqa: E501

        :param amount: The amount of this AuthDataRequest.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError(
                "Invalid value for `amount`, must not be `None`"
            )  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this AuthDataRequest.  # noqa: E501

        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501

        :return: The currency of this AuthDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AuthDataRequest.

        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501

        :param currency: The currency of this AuthDataRequest.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError(
                "Invalid value for `currency`, must not be `None`"
            )  # noqa: E501

        self._currency = currency

    @property
    def dynamic_descriptor(self):
        """Gets the dynamic_descriptor of this AuthDataRequest.  # noqa: E501


        :return: The dynamic_descriptor of this AuthDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_descriptor

    @dynamic_descriptor.setter
    def dynamic_descriptor(self, dynamic_descriptor):
        """Sets the dynamic_descriptor of this AuthDataRequest.


        :param dynamic_descriptor: The dynamic_descriptor of this AuthDataRequest.  # noqa: E501
        :type: str
        """
        if dynamic_descriptor is not None and len(dynamic_descriptor) > 25:
            raise ValueError(
                "Invalid value for `dynamic_descriptor`, length must be less than or equal to `25`"
            )  # noqa: E501
        if dynamic_descriptor is not None and len(dynamic_descriptor) < 0:
            raise ValueError(
                "Invalid value for `dynamic_descriptor`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._dynamic_descriptor = dynamic_descriptor

    @property
    def generate_token(self):
        """Gets the generate_token of this AuthDataRequest.  # noqa: E501

        If set to `true`, token will be generated and returned in the response (callback). Token can be generated only for successful transactions (not for declined transactions) *(for BANKCARD payment method only)*  # noqa: E501

        :return: The generate_token of this AuthDataRequest.  # noqa: E501
        :rtype: bool
        """
        return self._generate_token

    @generate_token.setter
    def generate_token(self, generate_token):
        """Sets the generate_token of this AuthDataRequest.

        If set to `true`, token will be generated and returned in the response (callback). Token can be generated only for successful transactions (not for declined transactions) *(for BANKCARD payment method only)*  # noqa: E501

        :param generate_token: The generate_token of this AuthDataRequest.  # noqa: E501
        :type: bool
        """

        self._generate_token = generate_token

    @property
    def installment_amount(self):
        """Gets the installment_amount of this AuthDataRequest.  # noqa: E501

        Amount of 1 installment authentication, should be less or equal to total amount of subscription, can have dot as a decimal separator. Mandatory for Payment Page Mode only.  # noqa: E501

        :return: The installment_amount of this AuthDataRequest.  # noqa: E501
        :rtype: float
        """
        return self._installment_amount

    @installment_amount.setter
    def installment_amount(self, installment_amount):
        """Sets the installment_amount of this AuthDataRequest.

        Amount of 1 installment authentication, should be less or equal to total amount of subscription, can have dot as a decimal separator. Mandatory for Payment Page Mode only.  # noqa: E501

        :param installment_amount: The installment_amount of this AuthDataRequest.  # noqa: E501
        :type: float
        """

        self._installment_amount = installment_amount

    @property
    def installment_type(self):
        """Gets the installment_type of this AuthDataRequest.  # noqa: E501

        Installment type, 2 possible values: `IF` - issuer financed `MF_HOLD' - merchant financed. For installment subscription with hold rest amount.  # noqa: E501

        :return: The installment_type of this AuthDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._installment_type

    @installment_type.setter
    def installment_type(self, installment_type):
        """Sets the installment_type of this AuthDataRequest.

        Installment type, 2 possible values: `IF` - issuer financed `MF_HOLD' - merchant financed. For installment subscription with hold rest amount.  # noqa: E501

        :param installment_type: The installment_type of this AuthDataRequest.  # noqa: E501
        :type: str
        """
        if installment_type is not None and not re.search(
            r"IF|MF_HOLD", installment_type
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `installment_type`, must be a follow pattern or equal to `/IF|MF_HOLD/`"
            )  # noqa: E501

        self._installment_type = installment_type

    @property
    def installments(self):
        """Gets the installments of this AuthDataRequest.  # noqa: E501

        Number of total installment payments, to be charged per defined interval. For installment subscription with installment_type = `MF_HOLD` can be 1-12. For installment subscription with installment_type = `IF` can be 1-99.  # noqa: E501

        :return: The installments of this AuthDataRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this AuthDataRequest.

        Number of total installment payments, to be charged per defined interval. For installment subscription with installment_type = `MF_HOLD` can be 1-12. For installment subscription with installment_type = `IF` can be 1-99.  # noqa: E501

        :param installments: The installments of this AuthDataRequest.  # noqa: E501
        :type: list[int]
        """

        self._installments = installments

    @property
    def note(self):
        """Gets the note of this AuthDataRequest.  # noqa: E501

        Note about the authentication, not shown to Customer  # noqa: E501

        :return: The note of this AuthDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this AuthDataRequest.

        Note about the authentication, not shown to Customer  # noqa: E501

        :param note: The note of this AuthDataRequest.  # noqa: E501
        :type: str
        """
        if note is not None and len(note) > 100:
            raise ValueError(
                "Invalid value for `note`, length must be less than or equal to `100`"
            )  # noqa: E501
        if note is not None and len(note) < 0:
            raise ValueError(
                "Invalid value for `note`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._note = note

    @property
    def recurring_data(self):
        """Gets the recurring_data of this AuthDataRequest.  # noqa: E501

        Recurring data  # noqa: E501

        :return: The recurring_data of this AuthDataRequest.  # noqa: E501
        :rtype: RecurringData
        """
        return self._recurring_data

    @recurring_data.setter
    def recurring_data(self, recurring_data):
        """Sets the recurring_data of this AuthDataRequest.

        Recurring data  # noqa: E501

        :param recurring_data: The recurring_data of this AuthDataRequest.  # noqa: E501
        :type: RecurringData
        """

        self._recurring_data = recurring_data

    @property
    def sca_exemption(self):
        """Gets the sca_exemption of this AuthDataRequest.  # noqa: E501

        Indicates the exemption type that you want to request for the authentication. Possible value: LOW_VALUE  # noqa: E501

        :return: The sca_exemption of this AuthDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._sca_exemption

    @sca_exemption.setter
    def sca_exemption(self, sca_exemption):
        """Sets the sca_exemption of this AuthDataRequest.

        Indicates the exemption type that you want to request for the authentication. Possible value: LOW_VALUE  # noqa: E501

        :param sca_exemption: The sca_exemption of this AuthDataRequest.  # noqa: E501
        :type: str
        """
        if sca_exemption is not None and not re.search(
            r"LOW_VALUE", sca_exemption
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `sca_exemption`, must be a follow pattern or equal to `/LOW_VALUE/`"
            )  # noqa: E501

        self._sca_exemption = sca_exemption

    @property
    def three_ds_challenge_indicator(self):
        """Gets the three_ds_challenge_indicator of this AuthDataRequest.  # noqa: E501


        :return: The three_ds_challenge_indicator of this AuthDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._three_ds_challenge_indicator

    @three_ds_challenge_indicator.setter
    def three_ds_challenge_indicator(self, three_ds_challenge_indicator):
        """Sets the three_ds_challenge_indicator of this AuthDataRequest.


        :param three_ds_challenge_indicator: The three_ds_challenge_indicator of this AuthDataRequest.  # noqa: E501
        :type: str
        """
        if three_ds_challenge_indicator is not None and not re.search(
            r"01|04", three_ds_challenge_indicator
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `three_ds_challenge_indicator`, must be a follow pattern or equal to `/01|04/`"
            )  # noqa: E501

        self._three_ds_challenge_indicator = three_ds_challenge_indicator

    @property
    def trans_type(self):
        """Gets the trans_type of this AuthDataRequest.  # noqa: E501

        Identifies the type of transaction being authenticated.  # noqa: E501

        :return: The trans_type of this AuthDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._trans_type

    @trans_type.setter
    def trans_type(self, trans_type):
        """Sets the trans_type of this AuthDataRequest.

        Identifies the type of transaction being authenticated.  # noqa: E501

        :param trans_type: The trans_type of this AuthDataRequest.  # noqa: E501
        :type: str
        """
        if trans_type is not None and not re.search(
            r"01|03|10|11|28", trans_type
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `trans_type`, must be a follow pattern or equal to `/01|03|10|11|28/`"
            )  # noqa: E501

        self._trans_type = trans_type

    class Type(object):
        AVS = "AVS"
        THREE_DS_PA = "THREE_DS_PA"
        THREE_DS_NPA = "THREE_DS_NPA"

    @property
    def type(self):
        """Gets the type of this AuthDataRequest.  # noqa: E501


        :return: The type of this AuthDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuthDataRequest.


        :param type: The type of this AuthDataRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["AVS", "THREE_DS_PA", "THREE_DS_NPA"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}".format(  # noqa: E501
                    type, allowed_values
                )
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(AuthDataRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthDataRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
