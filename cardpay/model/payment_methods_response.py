# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cardpay.model.supported_payment_method import (
    SupportedPaymentMethod,
)  # noqa: F401,E501


class PaymentMethodsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "brands": "list[str]",
        "category": "str",
        "name": "str",
        "supported_payment_methods": "list[SupportedPaymentMethod]",
    }

    attribute_map = {
        "brands": "brands",
        "category": "category",
        "name": "name",
        "supported_payment_methods": "supported_payment_methods",
    }

    def __init__(
        self, brands=None, category=None, name=None, supported_payment_methods=None
    ):  # noqa: E501
        """PaymentMethodsResponse - a model defined in Swagger"""  # noqa: E501

        self._brands = None
        self._category = None
        self._name = None
        self._supported_payment_methods = None
        self.discriminator = None

        if brands is not None:
            self.brands = brands
        if category is not None:
            self.category = category
        if name is not None:
            self.name = name
        if supported_payment_methods is not None:
            self.supported_payment_methods = supported_payment_methods

    @property
    def brands(self):
        """Gets the brands of this PaymentMethodsResponse.  # noqa: E501

        Available Card Brands, is presented only for 'BANKCARD' payment method  # noqa: E501

        :return: The brands of this PaymentMethodsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this PaymentMethodsResponse.

        Available Card Brands, is presented only for 'BANKCARD' payment method  # noqa: E501

        :param brands: The brands of this PaymentMethodsResponse.  # noqa: E501
        :type: list[str]
        """

        self._brands = brands

    @property
    def category(self):
        """Gets the category of this PaymentMethodsResponse.  # noqa: E501

        Payment method category  # noqa: E501

        :return: The category of this PaymentMethodsResponse.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PaymentMethodsResponse.

        Payment method category  # noqa: E501

        :param category: The category of this PaymentMethodsResponse.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def name(self):
        """Gets the name of this PaymentMethodsResponse.  # noqa: E501

        Payment method name  # noqa: E501

        :return: The name of this PaymentMethodsResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentMethodsResponse.

        Payment method name  # noqa: E501

        :param name: The name of this PaymentMethodsResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def supported_payment_methods(self):
        """Gets the supported_payment_methods of this PaymentMethodsResponse.  # noqa: E501

        Supported payment methods  # noqa: E501

        :return: The supported_payment_methods of this PaymentMethodsResponse.  # noqa: E501
        :rtype: list[SupportedPaymentMethod]
        """
        return self._supported_payment_methods

    @supported_payment_methods.setter
    def supported_payment_methods(self, supported_payment_methods):
        """Sets the supported_payment_methods of this PaymentMethodsResponse.

        Supported payment methods  # noqa: E501

        :param supported_payment_methods: The supported_payment_methods of this PaymentMethodsResponse.  # noqa: E501
        :type: list[SupportedPaymentMethod]
        """

        self._supported_payment_methods = supported_payment_methods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(PaymentMethodsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethodsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
