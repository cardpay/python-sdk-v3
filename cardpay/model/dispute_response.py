# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cardpay.model.dispute_response_card_account import (
    DisputeResponseCardAccount,
)  # noqa: F401,E501
from cardpay.model.dispute_response_customer import (
    DisputeResponseCustomer,
)  # noqa: F401,E501
from cardpay.model.dispute_response_dispute_data import (
    DisputeResponseDisputeData,
)  # noqa: F401,E501
from cardpay.model.dispute_response_merchant_order import (
    DisputeResponseMerchantOrder,
)  # noqa: F401,E501
from cardpay.model.dispute_response_payment_data import (
    DisputeResponsePaymentData,
)  # noqa: F401,E501


class DisputeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "card_account": "DisputeResponseCardAccount",
        "customer": "DisputeResponseCustomer",
        "dispute_data": "DisputeResponseDisputeData",
        "merchant_order": "DisputeResponseMerchantOrder",
        "payment_data": "DisputeResponsePaymentData",
    }

    attribute_map = {
        "card_account": "card_account",
        "customer": "customer",
        "dispute_data": "dispute_data",
        "merchant_order": "merchant_order",
        "payment_data": "payment_data",
    }

    def __init__(
        self,
        card_account=None,
        customer=None,
        dispute_data=None,
        merchant_order=None,
        payment_data=None,
    ):  # noqa: E501
        """DisputeResponse - a model defined in Swagger"""  # noqa: E501

        self._card_account = None
        self._customer = None
        self._dispute_data = None
        self._merchant_order = None
        self._payment_data = None
        self.discriminator = None

        if card_account is not None:
            self.card_account = card_account
        if customer is not None:
            self.customer = customer
        if dispute_data is not None:
            self.dispute_data = dispute_data
        if merchant_order is not None:
            self.merchant_order = merchant_order
        if payment_data is not None:
            self.payment_data = payment_data

    @property
    def card_account(self):
        """Gets the card_account of this DisputeResponse.  # noqa: E501

        Bank card data  # noqa: E501

        :return: The card_account of this DisputeResponse.  # noqa: E501
        :rtype: DisputeResponseCardAccount
        """
        return self._card_account

    @card_account.setter
    def card_account(self, card_account):
        """Sets the card_account of this DisputeResponse.

        Bank card data  # noqa: E501

        :param card_account: The card_account of this DisputeResponse.  # noqa: E501
        :type: DisputeResponseCardAccount
        """

        self._card_account = card_account

    @property
    def customer(self):
        """Gets the customer of this DisputeResponse.  # noqa: E501

        Customer data  # noqa: E501

        :return: The customer of this DisputeResponse.  # noqa: E501
        :rtype: DisputeResponseCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this DisputeResponse.

        Customer data  # noqa: E501

        :param customer: The customer of this DisputeResponse.  # noqa: E501
        :type: DisputeResponseCustomer
        """

        self._customer = customer

    @property
    def dispute_data(self):
        """Gets the dispute_data of this DisputeResponse.  # noqa: E501

        Dispute data  # noqa: E501

        :return: The dispute_data of this DisputeResponse.  # noqa: E501
        :rtype: DisputeResponseDisputeData
        """
        return self._dispute_data

    @dispute_data.setter
    def dispute_data(self, dispute_data):
        """Sets the dispute_data of this DisputeResponse.

        Dispute data  # noqa: E501

        :param dispute_data: The dispute_data of this DisputeResponse.  # noqa: E501
        :type: DisputeResponseDisputeData
        """

        self._dispute_data = dispute_data

    @property
    def merchant_order(self):
        """Gets the merchant_order of this DisputeResponse.  # noqa: E501

        Merchant's order data  # noqa: E501

        :return: The merchant_order of this DisputeResponse.  # noqa: E501
        :rtype: DisputeResponseMerchantOrder
        """
        return self._merchant_order

    @merchant_order.setter
    def merchant_order(self, merchant_order):
        """Sets the merchant_order of this DisputeResponse.

        Merchant's order data  # noqa: E501

        :param merchant_order: The merchant_order of this DisputeResponse.  # noqa: E501
        :type: DisputeResponseMerchantOrder
        """

        self._merchant_order = merchant_order

    @property
    def payment_data(self):
        """Gets the payment_data of this DisputeResponse.  # noqa: E501

        Payment data  # noqa: E501

        :return: The payment_data of this DisputeResponse.  # noqa: E501
        :rtype: DisputeResponsePaymentData
        """
        return self._payment_data

    @payment_data.setter
    def payment_data(self, payment_data):
        """Sets the payment_data of this DisputeResponse.

        Payment data  # noqa: E501

        :param payment_data: The payment_data of this DisputeResponse.  # noqa: E501
        :type: DisputeResponsePaymentData
        """

        self._payment_data = payment_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(DisputeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisputeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
