# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentRequestCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "acct_type": "str",
        "eci": "str",
        "expiration": "str",
        "holder": "str",
        "network_token": "bool",
        "pan": "str",
        "pin_code": "str",
        "security_code": "str",
        "token_cryptogram": "str",
        "token_type": "str",
    }

    attribute_map = {
        "acct_type": "acct_type",
        "eci": "eci",
        "expiration": "expiration",
        "holder": "holder",
        "network_token": "network_token",
        "pan": "pan",
        "pin_code": "pin_code",
        "security_code": "security_code",
        "token_cryptogram": "token_cryptogram",
        "token_type": "token_type",
    }

    def __init__(
        self,
        acct_type=None,
        eci=None,
        expiration=None,
        holder=None,
        network_token=None,
        pan=None,
        pin_code=None,
        security_code=None,
        token_cryptogram=None,
        token_type=None,
    ):  # noqa: E501
        """PaymentRequestCard - a model defined in Swagger"""  # noqa: E501

        self._acct_type = None
        self._eci = None
        self._expiration = None
        self._holder = None
        self._network_token = None
        self._pan = None
        self._pin_code = None
        self._security_code = None
        self._token_cryptogram = None
        self._token_type = None
        self.discriminator = None

        if acct_type is not None:
            self.acct_type = acct_type
        if eci is not None:
            self.eci = eci
        if expiration is not None:
            self.expiration = expiration
        if holder is not None:
            self.holder = holder
        if network_token is not None:
            self.network_token = network_token
        if pan is not None:
            self.pan = pan
        if pin_code is not None:
            self.pin_code = pin_code
        if security_code is not None:
            self.security_code = security_code
        if token_cryptogram is not None:
            self.token_cryptogram = token_cryptogram
        if token_type is not None:
            self.token_type = token_type

    class AcctType(object):
        _01 = "01"
        _02 = "02"
        _03 = "03"

    @property
    def acct_type(self):
        """Gets the acct_type of this PaymentRequestCard.  # noqa: E501


        :return: The acct_type of this PaymentRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._acct_type

    @acct_type.setter
    def acct_type(self, acct_type):
        """Sets the acct_type of this PaymentRequestCard.


        :param acct_type: The acct_type of this PaymentRequestCard.  # noqa: E501
        :type: str
        """
        allowed_values = ["01", "02", "03"]  # noqa: E501
        if acct_type not in allowed_values:
            raise ValueError(
                "Invalid value for `acct_type` ({0}), must be one of {1}".format(  # noqa: E501
                    acct_type, allowed_values
                )
            )

        self._acct_type = acct_type

    @property
    def eci(self):
        """Gets the eci of this PaymentRequestCard.  # noqa: E501

        The electronic commerce indicator  # noqa: E501

        :return: The eci of this PaymentRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._eci

    @eci.setter
    def eci(self, eci):
        """Sets the eci of this PaymentRequestCard.

        The electronic commerce indicator  # noqa: E501

        :param eci: The eci of this PaymentRequestCard.  # noqa: E501
        :type: str
        """
        if eci is not None and not re.search(
            r"^(00|01|02|05|06|07)$", eci
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `eci`, must be a follow pattern or equal to `/^(00|01|02|05|06|07)$/`"
            )  # noqa: E501

        self._eci = eci

    @property
    def expiration(self):
        """Gets the expiration of this PaymentRequestCard.  # noqa: E501

        Customer's card expiration date. Format: `mm/yyyy`  # noqa: E501

        :return: The expiration of this PaymentRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this PaymentRequestCard.

        Customer's card expiration date. Format: `mm/yyyy`  # noqa: E501

        :param expiration: The expiration of this PaymentRequestCard.  # noqa: E501
        :type: str
        """

        self._expiration = expiration

    @property
    def holder(self):
        """Gets the holder of this PaymentRequestCard.  # noqa: E501

        Customer's cardholder name. Any valid cardholder name  # noqa: E501

        :return: The holder of this PaymentRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this PaymentRequestCard.

        Customer's cardholder name. Any valid cardholder name  # noqa: E501

        :param holder: The holder of this PaymentRequestCard.  # noqa: E501
        :type: str
        """

        self._holder = holder

    @property
    def network_token(self):
        """Gets the network_token of this PaymentRequestCard.  # noqa: E501


        :return: The network_token of this PaymentRequestCard.  # noqa: E501
        :rtype: bool
        """
        return self._network_token

    @network_token.setter
    def network_token(self, network_token):
        """Sets the network_token of this PaymentRequestCard.


        :param network_token: The network_token of this PaymentRequestCard.  # noqa: E501
        :type: bool
        """

        self._network_token = network_token

    @property
    def pan(self):
        """Gets the pan of this PaymentRequestCard.  # noqa: E501

        Customer's card number (PAN). Any valid card number, may contain spaces  # noqa: E501

        :return: The pan of this PaymentRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this PaymentRequestCard.

        Customer's card number (PAN). Any valid card number, may contain spaces  # noqa: E501

        :param pan: The pan of this PaymentRequestCard.  # noqa: E501
        :type: str
        """

        self._pan = pan

    @property
    def pin_code(self):
        """Gets the pin_code of this PaymentRequestCard.  # noqa: E501


        :return: The pin_code of this PaymentRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._pin_code

    @pin_code.setter
    def pin_code(self, pin_code):
        """Sets the pin_code of this PaymentRequestCard.


        :param pin_code: The pin_code of this PaymentRequestCard.  # noqa: E501
        :type: str
        """

        self._pin_code = pin_code

    @property
    def security_code(self):
        """Gets the security_code of this PaymentRequestCard.  # noqa: E501

        Customer's CVV2 / CVC2 / CAV2  # noqa: E501

        :return: The security_code of this PaymentRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this PaymentRequestCard.

        Customer's CVV2 / CVC2 / CAV2  # noqa: E501

        :param security_code: The security_code of this PaymentRequestCard.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    @property
    def token_cryptogram(self):
        """Gets the token_cryptogram of this PaymentRequestCard.  # noqa: E501


        :return: The token_cryptogram of this PaymentRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._token_cryptogram

    @token_cryptogram.setter
    def token_cryptogram(self, token_cryptogram):
        """Sets the token_cryptogram of this PaymentRequestCard.


        :param token_cryptogram: The token_cryptogram of this PaymentRequestCard.  # noqa: E501
        :type: str
        """

        self._token_cryptogram = token_cryptogram

    @property
    def token_type(self):
        """Gets the token_type of this PaymentRequestCard.  # noqa: E501

        The field specifies the type of token used in a payment request. It indicates the source of the tokenized payment credentials. Possible values: APPLEPAY, GOOGLEPAY or NETWORK  # noqa: E501

        :return: The token_type of this PaymentRequestCard.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this PaymentRequestCard.

        The field specifies the type of token used in a payment request. It indicates the source of the tokenized payment credentials. Possible values: APPLEPAY, GOOGLEPAY or NETWORK  # noqa: E501

        :param token_type: The token_type of this PaymentRequestCard.  # noqa: E501
        :type: str
        """
        if token_type is not None and not re.search(
            r"APPLEPAY|GOOGLEPAY|NETWORK", token_type
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `token_type`, must be a follow pattern or equal to `/APPLEPAY|GOOGLEPAY|NETWORK/`"
            )  # noqa: E501

        self._token_type = token_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(PaymentRequestCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentRequestCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
