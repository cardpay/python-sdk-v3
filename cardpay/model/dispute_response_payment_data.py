# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DisputeResponsePaymentData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "amount": "str",
        "arn": "str",
        "auth_code": "str",
        "created": "str",
        "currency": "str",
        "id": "str",
    }

    attribute_map = {
        "amount": "amount",
        "arn": "arn",
        "auth_code": "auth_code",
        "created": "created",
        "currency": "currency",
        "id": "id",
    }

    def __init__(
        self,
        amount=None,
        arn=None,
        auth_code=None,
        created=None,
        currency=None,
        id=None,
    ):  # noqa: E501
        """DisputeResponsePaymentData - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._arn = None
        self._auth_code = None
        self._created = None
        self._currency = None
        self._id = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if arn is not None:
            self.arn = arn
        if auth_code is not None:
            self.auth_code = auth_code
        if created is not None:
            self.created = created
        if currency is not None:
            self.currency = currency
        if id is not None:
            self.id = id

    @property
    def amount(self):
        """Gets the amount of this DisputeResponsePaymentData.  # noqa: E501

        Payment amount  # noqa: E501

        :return: The amount of this DisputeResponsePaymentData.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DisputeResponsePaymentData.

        Payment amount  # noqa: E501

        :param amount: The amount of this DisputeResponsePaymentData.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def arn(self):
        """Gets the arn of this DisputeResponsePaymentData.  # noqa: E501

        ARN (Acquirer Reference Number), supplied by the acquiring financial institution, return only after receiving ARN from bank acquirer  # noqa: E501

        :return: The arn of this DisputeResponsePaymentData.  # noqa: E501
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this DisputeResponsePaymentData.

        ARN (Acquirer Reference Number), supplied by the acquiring financial institution, return only after receiving ARN from bank acquirer  # noqa: E501

        :param arn: The arn of this DisputeResponsePaymentData.  # noqa: E501
        :type: str
        """

        self._arn = arn

    @property
    def auth_code(self):
        """Gets the auth_code of this DisputeResponsePaymentData.  # noqa: E501

        Authorization code, provided by bank  # noqa: E501

        :return: The auth_code of this DisputeResponsePaymentData.  # noqa: E501
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this DisputeResponsePaymentData.

        Authorization code, provided by bank  # noqa: E501

        :param auth_code: The auth_code of this DisputeResponsePaymentData.  # noqa: E501
        :type: str
        """

        self._auth_code = auth_code

    @property
    def created(self):
        """Gets the created of this DisputeResponsePaymentData.  # noqa: E501

        Payment creation date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (format - yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501

        :return: The created of this DisputeResponsePaymentData.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DisputeResponsePaymentData.

        Payment creation date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (format - yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501

        :param created: The created of this DisputeResponsePaymentData.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def currency(self):
        """Gets the currency of this DisputeResponsePaymentData.  # noqa: E501

        Payment currency  # noqa: E501

        :return: The currency of this DisputeResponsePaymentData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DisputeResponsePaymentData.

        Payment currency  # noqa: E501

        :param currency: The currency of this DisputeResponsePaymentData.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this DisputeResponsePaymentData.  # noqa: E501

        Unlimint's payment id  # noqa: E501

        :return: The id of this DisputeResponsePaymentData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DisputeResponsePaymentData.

        Unlimint's payment id  # noqa: E501

        :param id: The id of this DisputeResponsePaymentData.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(DisputeResponsePaymentData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisputeResponsePaymentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
