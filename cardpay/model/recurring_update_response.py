# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cardpay.model.response_updated_transaction_data import (
    ResponseUpdatedTransactionData,
)  # noqa: F401,E501
from cardpay.model.transaction_response_merchant_order import (
    TransactionResponseMerchantOrder,
)  # noqa: F401,E501


class RecurringUpdateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "operation": "str",
        "merchant_order": "TransactionResponseMerchantOrder",
        "recurring_data": "ResponseUpdatedTransactionData",
    }

    attribute_map = {
        "operation": "operation",
        "merchant_order": "merchant_order",
        "recurring_data": "recurring_data",
    }

    def __init__(
        self, operation=None, merchant_order=None, recurring_data=None
    ):  # noqa: E501
        """RecurringUpdateResponse - a model defined in Swagger"""  # noqa: E501

        self._operation = None
        self._merchant_order = None
        self._recurring_data = None
        self.discriminator = None

        if operation is not None:
            self.operation = operation
        if merchant_order is not None:
            self.merchant_order = merchant_order
        if recurring_data is not None:
            self.recurring_data = recurring_data

    class Operation(object):
        CHANGE_STATUS = "CHANGE_STATUS"
        CONFIRM_3DS = "CONFIRM_3DS"
        EXECUTE = "EXECUTE"

    @property
    def operation(self):
        """Gets the operation of this RecurringUpdateResponse.  # noqa: E501

        `CHANGE_STATUS` value  # noqa: E501

        :return: The operation of this RecurringUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this RecurringUpdateResponse.

        `CHANGE_STATUS` value  # noqa: E501

        :param operation: The operation of this RecurringUpdateResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["CHANGE_STATUS", "CONFIRM_3DS", "EXECUTE"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}".format(  # noqa: E501
                    operation, allowed_values
                )
            )

        self._operation = operation

    @property
    def merchant_order(self):
        """Gets the merchant_order of this RecurringUpdateResponse.  # noqa: E501

        Merchant data  # noqa: E501

        :return: The merchant_order of this RecurringUpdateResponse.  # noqa: E501
        :rtype: TransactionResponseMerchantOrder
        """
        return self._merchant_order

    @merchant_order.setter
    def merchant_order(self, merchant_order):
        """Sets the merchant_order of this RecurringUpdateResponse.

        Merchant data  # noqa: E501

        :param merchant_order: The merchant_order of this RecurringUpdateResponse.  # noqa: E501
        :type: TransactionResponseMerchantOrder
        """

        self._merchant_order = merchant_order

    @property
    def recurring_data(self):
        """Gets the recurring_data of this RecurringUpdateResponse.  # noqa: E501

        Recurring data  # noqa: E501

        :return: The recurring_data of this RecurringUpdateResponse.  # noqa: E501
        :rtype: ResponseUpdatedTransactionData
        """
        return self._recurring_data

    @recurring_data.setter
    def recurring_data(self, recurring_data):
        """Sets the recurring_data of this RecurringUpdateResponse.

        Recurring data  # noqa: E501

        :param recurring_data: The recurring_data of this RecurringUpdateResponse.  # noqa: E501
        :type: ResponseUpdatedTransactionData
        """

        self._recurring_data = recurring_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(RecurringUpdateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecurringUpdateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
