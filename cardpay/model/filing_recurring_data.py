# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FilingRecurringData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "currency": "str",
        "dynamic_descriptor": "str",
        "initiator": "str",
        "note": "str",
        "trans_type": "str",
    }

    attribute_map = {
        "currency": "currency",
        "dynamic_descriptor": "dynamic_descriptor",
        "initiator": "initiator",
        "note": "note",
        "trans_type": "trans_type",
    }

    def __init__(
        self,
        currency=None,
        dynamic_descriptor=None,
        initiator=None,
        note=None,
        trans_type=None,
    ):  # noqa: E501
        """FilingRecurringData - a model defined in Swagger"""  # noqa: E501

        self._currency = None
        self._dynamic_descriptor = None
        self._initiator = None
        self._note = None
        self._trans_type = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if dynamic_descriptor is not None:
            self.dynamic_descriptor = dynamic_descriptor
        if initiator is not None:
            self.initiator = initiator
        if note is not None:
            self.note = note
        if trans_type is not None:
            self.trans_type = trans_type

    @property
    def currency(self):
        """Gets the currency of this FilingRecurringData.  # noqa: E501

        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501

        :return: The currency of this FilingRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this FilingRecurringData.

        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501

        :param currency: The currency of this FilingRecurringData.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def dynamic_descriptor(self):
        """Gets the dynamic_descriptor of this FilingRecurringData.  # noqa: E501

        Short description of the service or product, must be enabled by CardPay manager to be used  # noqa: E501

        :return: The dynamic_descriptor of this FilingRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_descriptor

    @dynamic_descriptor.setter
    def dynamic_descriptor(self, dynamic_descriptor):
        """Sets the dynamic_descriptor of this FilingRecurringData.

        Short description of the service or product, must be enabled by CardPay manager to be used  # noqa: E501

        :param dynamic_descriptor: The dynamic_descriptor of this FilingRecurringData.  # noqa: E501
        :type: str
        """
        if dynamic_descriptor is not None and len(dynamic_descriptor) > 25:
            raise ValueError(
                "Invalid value for `dynamic_descriptor`, length must be less than or equal to `25`"
            )  # noqa: E501
        if dynamic_descriptor is not None and len(dynamic_descriptor) < 0:
            raise ValueError(
                "Invalid value for `dynamic_descriptor`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._dynamic_descriptor = dynamic_descriptor

    @property
    def initiator(self):
        """Gets the initiator of this FilingRecurringData.  # noqa: E501

        Can be only `cit` (cardholder initiated transaction)  # noqa: E501

        :return: The initiator of this FilingRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this FilingRecurringData.

        Can be only `cit` (cardholder initiated transaction)  # noqa: E501

        :param initiator: The initiator of this FilingRecurringData.  # noqa: E501
        :type: str
        """
        if initiator is not None and len(initiator) > 3:
            raise ValueError(
                "Invalid value for `initiator`, length must be less than or equal to `3`"
            )  # noqa: E501
        if initiator is not None and len(initiator) < 0:
            raise ValueError(
                "Invalid value for `initiator`, length must be greater than or equal to `0`"
            )  # noqa: E501
        if initiator is not None and not re.search(r"cit", initiator):  # noqa: E501
            raise ValueError(
                r"Invalid value for `initiator`, must be a follow pattern or equal to `/cit/`"
            )  # noqa: E501

        self._initiator = initiator

    @property
    def note(self):
        """Gets the note of this FilingRecurringData.  # noqa: E501

        Note about the transaction that will not be displayed to Customer  # noqa: E501

        :return: The note of this FilingRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this FilingRecurringData.

        Note about the transaction that will not be displayed to Customer  # noqa: E501

        :param note: The note of this FilingRecurringData.  # noqa: E501
        :type: str
        """
        if note is not None and len(note) > 100:
            raise ValueError(
                "Invalid value for `note`, length must be less than or equal to `100`"
            )  # noqa: E501
        if note is not None and len(note) < 0:
            raise ValueError(
                "Invalid value for `note`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._note = note

    class TransType(object):
        _01 = "01"
        _03 = "03"
        _10 = "10"
        _11 = "11"
        _28 = "28"

    @property
    def trans_type(self):
        """Gets the trans_type of this FilingRecurringData.  # noqa: E501


        :return: The trans_type of this FilingRecurringData.  # noqa: E501
        :rtype: str
        """
        return self._trans_type

    @trans_type.setter
    def trans_type(self, trans_type):
        """Sets the trans_type of this FilingRecurringData.


        :param trans_type: The trans_type of this FilingRecurringData.  # noqa: E501
        :type: str
        """
        allowed_values = ["01", "03", "10", "11", "28"]  # noqa: E501
        if trans_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trans_type` ({0}), must be one of {1}".format(  # noqa: E501
                    trans_type, allowed_values
                )
            )

        self._trans_type = trans_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(FilingRecurringData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilingRecurringData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
