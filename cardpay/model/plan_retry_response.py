# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PlanRetryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "duration": "int",
        "frequency": "list[int]",
        "mode": "str",
        "retry_advice": "bool",
        "schedule": "list[int]",
    }

    attribute_map = {
        "duration": "duration",
        "frequency": "frequency",
        "mode": "mode",
        "retry_advice": "retry_advice",
        "schedule": "schedule",
    }

    def __init__(
        self, duration=None, frequency=None, mode=None, retry_advice=None, schedule=None
    ):  # noqa: E501
        """PlanRetryResponse - a model defined in Swagger"""  # noqa: E501

        self._duration = None
        self._frequency = None
        self._mode = None
        self._retry_advice = None
        self._schedule = None
        self.discriminator = None

        if duration is not None:
            self.duration = duration
        if frequency is not None:
            self.frequency = frequency
        if mode is not None:
            self.mode = mode
        if retry_advice is not None:
            self.retry_advice = retry_advice
        if schedule is not None:
            self.schedule = schedule

    @property
    def duration(self):
        """Gets the duration of this PlanRetryResponse.  # noqa: E501

        Value of period time which is retry available for subscription in days. Mandatory, if mode = DEFAULT Possible values: min: 1 max: 30  # noqa: E501

        :return: The duration of this PlanRetryResponse.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PlanRetryResponse.

        Value of period time which is retry available for subscription in days. Mandatory, if mode = DEFAULT Possible values: min: 1 max: 30  # noqa: E501

        :param duration: The duration of this PlanRetryResponse.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def frequency(self):
        """Gets the frequency of this PlanRetryResponse.  # noqa: E501

        Intervals for initiating reties. Mandatory, if mode = INTERVAL Possible element values in array: min: 1 max: 30  # noqa: E501

        :return: The frequency of this PlanRetryResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this PlanRetryResponse.

        Intervals for initiating reties. Mandatory, if mode = INTERVAL Possible element values in array: min: 1 max: 30  # noqa: E501

        :param frequency: The frequency of this PlanRetryResponse.  # noqa: E501
        :type: list[int]
        """

        self._frequency = frequency

    class Mode(object):
        DEFAULT = "DEFAULT"
        INTERVAL = "INTERVAL"
        CALENDAR = "CALENDAR"
        NO_RETRY = "NO_RETRY"

    @property
    def mode(self):
        """Gets the mode of this PlanRetryResponse.  # noqa: E501

        Retry mode  # noqa: E501

        :return: The mode of this PlanRetryResponse.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this PlanRetryResponse.

        Retry mode  # noqa: E501

        :param mode: The mode of this PlanRetryResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEFAULT", "INTERVAL", "CALENDAR", "NO_RETRY"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}".format(  # noqa: E501
                    mode, allowed_values
                )
            )

        self._mode = mode

    @property
    def retry_advice(self):
        """Gets the retry_advice of this PlanRetryResponse.  # noqa: E501

        If value is true MAC recommendation will be applied, if false retry will be strictly according setting for retry Can be only for mode = INTERVAL (if not specified then default value is 'true')  # noqa: E501

        :return: The retry_advice of this PlanRetryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._retry_advice

    @retry_advice.setter
    def retry_advice(self, retry_advice):
        """Sets the retry_advice of this PlanRetryResponse.

        If value is true MAC recommendation will be applied, if false retry will be strictly according setting for retry Can be only for mode = INTERVAL (if not specified then default value is 'true')  # noqa: E501

        :param retry_advice: The retry_advice of this PlanRetryResponse.  # noqa: E501
        :type: bool
        """

        self._retry_advice = retry_advice

    @property
    def schedule(self):
        """Gets the schedule of this PlanRetryResponse.  # noqa: E501

        Intervals for initiating reties. Mandatory, if mode = CALENDAR Possible element values in array: min: 1 max: 30  # noqa: E501

        :return: The schedule of this PlanRetryResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this PlanRetryResponse.

        Intervals for initiating reties. Mandatory, if mode = CALENDAR Possible element values in array: min: 1 max: 30  # noqa: E501

        :param schedule: The schedule of this PlanRetryResponse.  # noqa: E501
        :type: list[int]
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(PlanRetryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanRetryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
