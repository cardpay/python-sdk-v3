# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReturnUrls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "cancel_url": "str",
        "decline_url": "str",
        "inprocess_url": "str",
        "return_url": "str",
        "success_url": "str",
    }

    attribute_map = {
        "cancel_url": "cancel_url",
        "decline_url": "decline_url",
        "inprocess_url": "inprocess_url",
        "return_url": "return_url",
        "success_url": "success_url",
    }

    def __init__(
        self,
        cancel_url=None,
        decline_url=None,
        inprocess_url=None,
        return_url=None,
        success_url=None,
    ):  # noqa: E501
        """ReturnUrls - a model defined in Swagger"""  # noqa: E501

        self._cancel_url = None
        self._decline_url = None
        self._inprocess_url = None
        self._return_url = None
        self._success_url = None
        self.discriminator = None

        if cancel_url is not None:
            self.cancel_url = cancel_url
        if decline_url is not None:
            self.decline_url = decline_url
        if inprocess_url is not None:
            self.inprocess_url = inprocess_url
        if return_url is not None:
            self.return_url = return_url
        if success_url is not None:
            self.success_url = success_url

    @property
    def cancel_url(self):
        """Gets the cancel_url of this ReturnUrls.  # noqa: E501

        Overrides default cancel URL only  # noqa: E501

        :return: The cancel_url of this ReturnUrls.  # noqa: E501
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this ReturnUrls.

        Overrides default cancel URL only  # noqa: E501

        :param cancel_url: The cancel_url of this ReturnUrls.  # noqa: E501
        :type: str
        """
        if cancel_url is not None and len(cancel_url) > 512:
            raise ValueError(
                "Invalid value for `cancel_url`, length must be less than or equal to `512`"
            )  # noqa: E501
        if cancel_url is not None and len(cancel_url) < 0:
            raise ValueError(
                "Invalid value for `cancel_url`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._cancel_url = cancel_url

    @property
    def decline_url(self):
        """Gets the decline_url of this ReturnUrls.  # noqa: E501

        Overrides default decline URL only  # noqa: E501

        :return: The decline_url of this ReturnUrls.  # noqa: E501
        :rtype: str
        """
        return self._decline_url

    @decline_url.setter
    def decline_url(self, decline_url):
        """Sets the decline_url of this ReturnUrls.

        Overrides default decline URL only  # noqa: E501

        :param decline_url: The decline_url of this ReturnUrls.  # noqa: E501
        :type: str
        """
        if decline_url is not None and len(decline_url) > 512:
            raise ValueError(
                "Invalid value for `decline_url`, length must be less than or equal to `512`"
            )  # noqa: E501
        if decline_url is not None and len(decline_url) < 0:
            raise ValueError(
                "Invalid value for `decline_url`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._decline_url = decline_url

    @property
    def inprocess_url(self):
        """Gets the inprocess_url of this ReturnUrls.  # noqa: E501

        Special URL for In process status of transaction  # noqa: E501

        :return: The inprocess_url of this ReturnUrls.  # noqa: E501
        :rtype: str
        """
        return self._inprocess_url

    @inprocess_url.setter
    def inprocess_url(self, inprocess_url):
        """Sets the inprocess_url of this ReturnUrls.

        Special URL for In process status of transaction  # noqa: E501

        :param inprocess_url: The inprocess_url of this ReturnUrls.  # noqa: E501
        :type: str
        """
        if inprocess_url is not None and len(inprocess_url) > 512:
            raise ValueError(
                "Invalid value for `inprocess_url`, length must be less than or equal to `512`"
            )  # noqa: E501
        if inprocess_url is not None and len(inprocess_url) < 0:
            raise ValueError(
                "Invalid value for `inprocess_url`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._inprocess_url = inprocess_url

    @property
    def return_url(self):
        """Gets the return_url of this ReturnUrls.  # noqa: E501

        Overrides default success URL, decline URL, cancel URL (only in Payment page mode), in process URL. return_url can be used separately or together with other URL parameters.  # noqa: E501

        :return: The return_url of this ReturnUrls.  # noqa: E501
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this ReturnUrls.

        Overrides default success URL, decline URL, cancel URL (only in Payment page mode), in process URL. return_url can be used separately or together with other URL parameters.  # noqa: E501

        :param return_url: The return_url of this ReturnUrls.  # noqa: E501
        :type: str
        """
        if return_url is not None and len(return_url) > 512:
            raise ValueError(
                "Invalid value for `return_url`, length must be less than or equal to `512`"
            )  # noqa: E501
        if return_url is not None and len(return_url) < 0:
            raise ValueError(
                "Invalid value for `return_url`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._return_url = return_url

    @property
    def success_url(self):
        """Gets the success_url of this ReturnUrls.  # noqa: E501

        Overrides default success URL only  # noqa: E501

        :return: The success_url of this ReturnUrls.  # noqa: E501
        :rtype: str
        """
        return self._success_url

    @success_url.setter
    def success_url(self, success_url):
        """Sets the success_url of this ReturnUrls.

        Overrides default success URL only  # noqa: E501

        :param success_url: The success_url of this ReturnUrls.  # noqa: E501
        :type: str
        """
        if success_url is not None and len(success_url) > 512:
            raise ValueError(
                "Invalid value for `success_url`, length must be less than or equal to `512`"
            )  # noqa: E501
        if success_url is not None and len(success_url) < 0:
            raise ValueError(
                "Invalid value for `success_url`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._success_url = success_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(ReturnUrls, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReturnUrls):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
