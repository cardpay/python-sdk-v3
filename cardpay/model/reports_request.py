# coding: utf-8

"""
    CardPay REST API

    Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cardpay.model.reports_data import ReportsData  # noqa: F401,E501
from cardpay.model.request import Request  # noqa: F401,E501


class ReportsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "callback_url": "str",
        "reports_data": "ReportsData",
        "request": "Request",
    }

    attribute_map = {
        "callback_url": "callback_url",
        "reports_data": "reports_data",
        "request": "request",
    }

    def __init__(
        self, callback_url=None, reports_data=None, request=None
    ):  # noqa: E501
        """ReportsRequest - a model defined in Swagger"""  # noqa: E501

        self._callback_url = None
        self._reports_data = None
        self._request = None
        self.discriminator = None

        if callback_url is not None:
            self.callback_url = callback_url
        self.reports_data = reports_data
        self.request = request

    @property
    def callback_url(self):
        """Gets the callback_url of this ReportsRequest.  # noqa: E501

        Url for sending resulted callback. If field is skipped then callback won't be sent.  # noqa: E501

        :return: The callback_url of this ReportsRequest.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this ReportsRequest.

        Url for sending resulted callback. If field is skipped then callback won't be sent.  # noqa: E501

        :param callback_url: The callback_url of this ReportsRequest.  # noqa: E501
        :type: str
        """
        if callback_url is not None and len(callback_url) > 512:
            raise ValueError(
                "Invalid value for `callback_url`, length must be less than or equal to `512`"
            )  # noqa: E501
        if callback_url is not None and len(callback_url) < 0:
            raise ValueError(
                "Invalid value for `callback_url`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._callback_url = callback_url

    @property
    def reports_data(self):
        """Gets the reports_data of this ReportsRequest.  # noqa: E501

        ReportsData  # noqa: E501

        :return: The reports_data of this ReportsRequest.  # noqa: E501
        :rtype: ReportsData
        """
        return self._reports_data

    @reports_data.setter
    def reports_data(self, reports_data):
        """Sets the reports_data of this ReportsRequest.

        ReportsData  # noqa: E501

        :param reports_data: The reports_data of this ReportsRequest.  # noqa: E501
        :type: ReportsData
        """
        if reports_data is None:
            raise ValueError(
                "Invalid value for `reports_data`, must not be `None`"
            )  # noqa: E501

        self._reports_data = reports_data

    @property
    def request(self):
        """Gets the request of this ReportsRequest.  # noqa: E501

        Request  # noqa: E501

        :return: The request of this ReportsRequest.  # noqa: E501
        :rtype: Request
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this ReportsRequest.

        Request  # noqa: E501

        :param request: The request of this ReportsRequest.  # noqa: E501
        :type: Request
        """
        if request is None:
            raise ValueError(
                "Invalid value for `request`, must not be `None`"
            )  # noqa: E501

        self._request = request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                if value is not None:
                    result[attr] = value
        if issubclass(ReportsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
